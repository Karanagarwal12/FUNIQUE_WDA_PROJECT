"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/gsap";
exports.ids = ["vendor-chunks/gsap"];
exports.modules = {

/***/ "(ssr)/./node_modules/gsap/CSSPlugin.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/CSSPlugin.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CSSPlugin: () => (/* binding */ CSSPlugin),\n/* harmony export */   _createElement: () => (/* binding */ _createElement),\n/* harmony export */   _getBBox: () => (/* binding */ _getBBox),\n/* harmony export */   checkPrefix: () => (/* binding */ _checkPropPrefix),\n/* harmony export */   \"default\": () => (/* binding */ CSSPlugin)\n/* harmony export */ });\n/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ \"(ssr)/./node_modules/gsap/gsap-core.js\");\n/*!\n * CSSPlugin 3.12.2\n * https://greensock.com\n *\n * Copyright 2008-2023, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/ /* eslint-disable */ \nvar _win, _doc, _docElement, _pluginInitted, _tempDiv, _tempDivStyler, _recentSetterPlugin, _reverting, _windowExists = function _windowExists() {\n    return \"undefined\" !== \"undefined\";\n}, _transformProps = {}, _RAD2DEG = 180 / Math.PI, _DEG2RAD = Math.PI / 180, _atan2 = Math.atan2, _bigNum = 1e8, _capsExp = /([A-Z])/g, _horizontalExp = /(left|right|width|margin|padding|x)/i, _complexExp = /[\\s,\\(]\\S/, _propertyAliases = {\n    autoAlpha: \"opacity,visibility\",\n    scale: \"scaleX,scaleY\",\n    alpha: \"opacity\"\n}, _renderCSSProp = function _renderCSSProp(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n}, _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n}, _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\n    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\n}, //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)\n_renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\n    var value = data.s + data.c * ratio;\n    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\n}, _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\n    return data.set(data.t, data.p, ratio ? data.e : data.b, data);\n}, _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\n}, _setterCSSStyle = function _setterCSSStyle(target, property, value) {\n    return target.style[property] = value;\n}, _setterCSSProp = function _setterCSSProp(target, property, value) {\n    return target.style.setProperty(property, value);\n}, _setterTransform = function _setterTransform(target, property, value) {\n    return target._gsap[property] = value;\n}, _setterScale = function _setterScale(target, property, value) {\n    return target._gsap.scaleX = target._gsap.scaleY = value;\n}, _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache.scaleX = cache.scaleY = value;\n    cache.renderTransform(ratio, cache);\n}, _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache[property] = value;\n    cache.renderTransform(ratio, cache);\n}, _transformProp = \"transform\", _transformOriginProp = _transformProp + \"Origin\", _saveStyle = function _saveStyle(property, isNotCSS) {\n    var _this = this;\n    var target = this.target, style = target.style;\n    if (property in _transformProps && style) {\n        this.tfm = this.tfm || {};\n        if (property !== \"transform\") {\n            property = _propertyAliases[property] || property;\n            ~property.indexOf(\",\") ? property.split(\",\").forEach(function(a) {\n                return _this.tfm[a] = _get(target, a);\n            }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property); // note: scale would map to \"scaleX,scaleY\", thus we loop and apply them both.\n        } else {\n            return _propertyAliases.transform.split(\",\").forEach(function(p) {\n                return _saveStyle.call(_this, p, isNotCSS);\n            });\n        }\n        if (this.props.indexOf(_transformProp) >= 0) {\n            return;\n        }\n        if (target._gsap.svg) {\n            this.svgo = target.getAttribute(\"data-svg-origin\");\n            this.props.push(_transformOriginProp, isNotCSS, \"\");\n        }\n        property = _transformProp;\n    }\n    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);\n}, _removeIndependentTransforms = function _removeIndependentTransforms(style) {\n    if (style.translate) {\n        style.removeProperty(\"translate\");\n        style.removeProperty(\"scale\");\n        style.removeProperty(\"rotate\");\n    }\n}, _revertStyle = function _revertStyle() {\n    var props = this.props, target = this.target, style = target.style, cache = target._gsap, i, p;\n    for(i = 0; i < props.length; i += 3){\n        // stored like this: property, isNotCSS, value\n        props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === \"--\" ? props[i] : props[i].replace(_capsExp, \"-$1\").toLowerCase());\n    }\n    if (this.tfm) {\n        for(p in this.tfm){\n            cache[p] = this.tfm[p];\n        }\n        if (cache.svg) {\n            cache.renderTransform();\n            target.setAttribute(\"data-svg-origin\", this.svgo || \"\");\n        }\n        i = _reverting();\n        if ((!i || !i.isStart) && !style[_transformProp]) {\n            _removeIndependentTransforms(style);\n            cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.\n        }\n    }\n}, _getStyleSaver = function _getStyleSaver(target, properties) {\n    var saver = {\n        target: target,\n        props: [],\n        revert: _revertStyle,\n        save: _saveStyle\n    };\n    target._gsap || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.\n    properties && properties.split(\",\").forEach(function(p) {\n        return saver.save(p);\n    });\n    return saver;\n}, _supports3D, _createElement = function _createElement(type, ns) {\n    var e = _doc.createElementNS ? _doc.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making \"style\" inaccessible.\n    return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).\n}, _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\n    var cs = getComputedStyle(target);\n    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, \"-$1\").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || \"\"; //css variables may not need caps swapped out for dashes and lowercase.\n}, _prefixes = \"O,Moz,ms,Ms,Webkit\".split(\",\"), _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\n    var e = element || _tempDiv, s = e.style, i = 5;\n    if (property in s && !preferPrefix) {\n        return property;\n    }\n    property = property.charAt(0).toUpperCase() + property.substr(1);\n    while(i-- && !(_prefixes[i] + property in s)){}\n    return i < 0 ? null : (i === 3 ? \"ms\" : i >= 0 ? _prefixes[i] : \"\") + property;\n}, _initCore = function _initCore() {\n    if (_windowExists() && window.document) {\n        _win = window;\n        _doc = _win.document;\n        _docElement = _doc.documentElement;\n        _tempDiv = _createElement(\"div\") || {\n            style: {}\n        };\n        _tempDivStyler = _createElement(\"div\");\n        _transformProp = _checkPropPrefix(_transformProp);\n        _transformOriginProp = _transformProp + \"Origin\";\n        _tempDiv.style.cssText = \"border-width:0;line-height:0;position:absolute;padding:0\"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.\n        _supports3D = !!_checkPropPrefix(\"perspective\");\n        _reverting = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.reverting;\n        _pluginInitted = 1;\n    }\n}, _getBBoxHack = function _getBBoxHack(swapIfPossible) {\n    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).\n    var svg = _createElement(\"svg\", this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\"), oldParent = this.parentNode, oldSibling = this.nextSibling, oldCSS = this.style.cssText, bbox;\n    _docElement.appendChild(svg);\n    svg.appendChild(this);\n    this.style.display = \"block\";\n    if (swapIfPossible) {\n        try {\n            bbox = this.getBBox();\n            this._gsapBBox = this.getBBox; //store the original\n            this.getBBox = _getBBoxHack;\n        } catch (e) {}\n    } else if (this._gsapBBox) {\n        bbox = this._gsapBBox();\n    }\n    if (oldParent) {\n        if (oldSibling) {\n            oldParent.insertBefore(this, oldSibling);\n        } else {\n            oldParent.appendChild(this);\n        }\n    }\n    _docElement.removeChild(svg);\n    this.style.cssText = oldCSS;\n    return bbox;\n}, _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\n    var i = attributesArray.length;\n    while(i--){\n        if (target.hasAttribute(attributesArray[i])) {\n            return target.getAttribute(attributesArray[i]);\n        }\n    }\n}, _getBBox = function _getBBox(target) {\n    var bounds;\n    try {\n        bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118\n    } catch (error) {\n        bounds = _getBBoxHack.call(target, true);\n    }\n    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.\n    return bounds && !bounds.width && !bounds.x && !bounds.y ? {\n        x: +_getAttributeFallbacks(target, [\n            \"x\",\n            \"cx\",\n            \"x1\"\n        ]) || 0,\n        y: +_getAttributeFallbacks(target, [\n            \"y\",\n            \"cy\",\n            \"y1\"\n        ]) || 0,\n        width: 0,\n        height: 0\n    } : bounds;\n}, _isSVG = function _isSVG(e) {\n    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n}, //reports if the element is an SVG on which getBBox() actually works\n_removeProperty = function _removeProperty(target, property) {\n    if (property) {\n        var style = target.style;\n        if (property in _transformProps && property !== _transformOriginProp) {\n            property = _transformProp;\n        }\n        if (style.removeProperty) {\n            if (property.substr(0, 2) === \"ms\" || property.substr(0, 6) === \"webkit\") {\n                //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be \"ms-transform\" instead of \"-ms-transform\" for IE9, for example)\n                property = \"-\" + property;\n            }\n            style.removeProperty(property.replace(_capsExp, \"-$1\").toLowerCase());\n        } else {\n            //note: old versions of IE use \"removeAttribute()\" instead of \"removeProperty()\"\n            style.removeAttribute(property);\n        }\n    }\n}, _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\n    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\n    plugin._pt = pt;\n    pt.b = beginning;\n    pt.e = end;\n    plugin._props.push(property);\n    return pt;\n}, _nonConvertibleUnits = {\n    deg: 1,\n    rad: 1,\n    turn: 1\n}, _nonStandardLayouts = {\n    grid: 1,\n    flex: 1\n}, //takes a single value like 20px and converts it to the unit specified, like \"%\", returning only the numeric amount.\n_convertToUnit = function _convertToUnit(target, property, value, unit) {\n    var curValue = parseFloat(value) || 0, curUnit = (value + \"\").trim().substr((curValue + \"\").length) || \"px\", // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()\n    style = _tempDiv.style, horizontal = _horizontalExp.test(property), isRootSVG = target.tagName.toLowerCase() === \"svg\", measureProperty = (isRootSVG ? \"client\" : \"offset\") + (horizontal ? \"Width\" : \"Height\"), amount = 100, toPixels = unit === \"px\", toPercent = unit === \"%\", px, parent, cache, isSVG;\n    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\n        return curValue;\n    }\n    curUnit !== \"px\" && !toPixels && (curValue = _convertToUnit(target, property, value, \"px\"));\n    isSVG = target.getCTM && _isSVG(target);\n    if ((toPercent || curUnit === \"%\") && (_transformProps[property] || ~property.indexOf(\"adius\"))) {\n        px = isSVG ? target.getBBox()[horizontal ? \"width\" : \"height\"] : target[measureProperty];\n        return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPercent ? curValue / px * amount : curValue / 100 * px);\n    }\n    style[horizontal ? \"width\" : \"height\"] = amount + (toPixels ? curUnit : unit);\n    parent = ~property.indexOf(\"adius\") || unit === \"em\" && target.appendChild && !isRootSVG ? target : target.parentNode;\n    if (isSVG) {\n        parent = (target.ownerSVGElement || {}).parentNode;\n    }\n    if (!parent || parent === _doc || !parent.appendChild) {\n        parent = _doc.body;\n    }\n    cache = parent._gsap;\n    if (cache && toPercent && cache.width && horizontal && cache.time === _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time && !cache.uncache) {\n        return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(curValue / cache.width * amount);\n    } else {\n        (toPercent || curUnit === \"%\") && !_nonStandardLayouts[_getComputedProperty(parent, \"display\")] && (style.position = _getComputedProperty(target, \"position\"));\n        parent === target && (style.position = \"static\"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.\n        parent.appendChild(_tempDiv);\n        px = _tempDiv[measureProperty];\n        parent.removeChild(_tempDiv);\n        style.position = \"absolute\";\n        if (horizontal && toPercent) {\n            cache = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(parent);\n            cache.time = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time;\n            cache.width = parent[measureProperty];\n        }\n    }\n    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\n}, _get = function _get(target, property, unit, uncache) {\n    var value;\n    _pluginInitted || _initCore();\n    if (property in _propertyAliases && property !== \"transform\") {\n        property = _propertyAliases[property];\n        if (~property.indexOf(\",\")) {\n            property = property.split(\",\")[0];\n        }\n    }\n    if (_transformProps[property] && property !== \"transform\") {\n        value = _parseTransform(target, uncache);\n        value = property !== \"transformOrigin\" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + \" \" + value.zOrigin + \"px\";\n    } else {\n        value = target.style[property];\n        if (!value || value === \"auto\" || uncache || ~(value + \"\").indexOf(\"calc(\")) {\n            value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getProperty)(target, property) || (property === \"opacity\" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius\n        }\n    }\n    return unit && !~(value + \"\").trim().indexOf(\" \") ? _convertToUnit(target, property, value, unit) + unit : value;\n}, _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\n    // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n    if (!start || start === \"none\") {\n        // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style (\"clipPath\" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as \"none\" whereas WebkitClipPath reports accurately like \"ellipse(100% 0% at 50% 0%)\", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/\n        var p = _checkPropPrefix(prop, target, 1), s = p && _getComputedProperty(target, p, 1);\n        if (s && s !== start) {\n            prop = p;\n            start = s;\n        } else if (prop === \"borderColor\") {\n            start = _getComputedProperty(target, \"borderTopColor\"); // Firefox bug: always reports \"borderColor\" as \"\", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/\n        }\n    }\n    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, target.style, prop, 0, 1, _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._renderComplexString), index = 0, matchIndex = 0, a, result, startValues, startNum, color, startValue, endValue, endNum, chunk, endUnit, startUnit, endValues;\n    pt.b = start;\n    pt.e = end;\n    start += \"\"; // ensure values are strings\n    end += \"\";\n    if (end === \"auto\") {\n        target.style[prop] = end;\n        end = _getComputedProperty(target, prop) || end;\n        target.style[prop] = start;\n    }\n    a = [\n        start,\n        end\n    ];\n    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorStringFilter)(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().\n    start = a[0];\n    end = a[1];\n    startValues = start.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];\n    endValues = end.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];\n    if (endValues.length) {\n        while(result = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.exec(end)){\n            endValue = result[0];\n            chunk = end.substring(index, result.index);\n            if (color) {\n                color = (color + 1) % 5;\n            } else if (chunk.substr(-5) === \"rgba(\" || chunk.substr(-5) === \"hsla(\") {\n                color = 1;\n            }\n            if (endValue !== (startValue = startValues[matchIndex++] || \"\")) {\n                startNum = parseFloat(startValue) || 0;\n                startUnit = startValue.substr((startNum + \"\").length);\n                endValue.charAt(1) === \"=\" && (endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, endValue) + startUnit);\n                endNum = parseFloat(endValue);\n                endUnit = endValue.substr((endNum + \"\").length);\n                index = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.lastIndex - endUnit.length;\n                if (!endUnit) {\n                    //if something like \"perspective:300\" is passed in and we must add a unit to the end\n                    endUnit = endUnit || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[prop] || startUnit;\n                    if (index === end.length) {\n                        end += endUnit;\n                        pt.e += endUnit;\n                    }\n                }\n                if (startUnit !== endUnit) {\n                    startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\n                } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.\n                pt._pt = {\n                    _next: pt._pt,\n                    p: chunk || matchIndex === 1 ? chunk : \",\",\n                    //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n                    s: startNum,\n                    c: endNum - startNum,\n                    m: color && color < 4 || prop === \"zIndex\" ? Math.round : 0\n                };\n            }\n        }\n        pt.c = index < end.length ? end.substring(index, end.length) : \"\"; //we use the \"c\" of the PropTween to store the final part of the string (after the last number)\n    } else {\n        pt.r = prop === \"display\" && end === \"none\" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\n    }\n    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus \"this\" would refer to the plugin.\n    return pt;\n}, _keywordToPercent = {\n    top: \"0%\",\n    bottom: \"100%\",\n    left: \"0%\",\n    right: \"100%\",\n    center: \"50%\"\n}, _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\n    var split = value.split(\" \"), x = split[0], y = split[1] || \"50%\";\n    if (x === \"top\" || x === \"bottom\" || y === \"left\" || y === \"right\") {\n        //the user provided them in the wrong order, so flip them\n        value = x;\n        x = y;\n        y = value;\n    }\n    split[0] = _keywordToPercent[x] || x;\n    split[1] = _keywordToPercent[y] || y;\n    return split.join(\" \");\n}, _renderClearProps = function _renderClearProps(ratio, data) {\n    if (data.tween && data.tween._time === data.tween._dur) {\n        var target = data.t, style = target.style, props = data.u, cache = target._gsap, prop, clearTransforms, i;\n        if (props === \"all\" || props === true) {\n            style.cssText = \"\";\n            clearTransforms = 1;\n        } else {\n            props = props.split(\",\");\n            i = props.length;\n            while(--i > -1){\n                prop = props[i];\n                if (_transformProps[prop]) {\n                    clearTransforms = 1;\n                    prop = prop === \"transformOrigin\" ? _transformOriginProp : _transformProp;\n                }\n                _removeProperty(target, prop);\n            }\n        }\n        if (clearTransforms) {\n            _removeProperty(target, _transformProp);\n            if (cache) {\n                cache.svg && target.removeAttribute(\"transform\");\n                _parseTransform(target, 1); // force all the cached values back to \"normal\"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.\n                cache.uncache = 1;\n                _removeIndependentTransforms(style);\n            }\n        }\n    }\n}, // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.\n_specialProps = {\n    clearProps: function clearProps(plugin, target, property, endValue, tween) {\n        if (tween.data !== \"isFromStart\") {\n            var pt = plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\n            pt.u = endValue;\n            pt.pr = -10;\n            pt.tween = tween;\n            plugin._props.push(property);\n            return 1;\n        }\n    }\n}, /*\n * --------------------------------------------------------------------------------------\n * TRANSFORMS\n * --------------------------------------------------------------------------------------\n */ _identity2DMatrix = [\n    1,\n    0,\n    0,\n    1,\n    0,\n    0\n], _rotationalProperties = {}, _isNullTransform = function _isNullTransform(value) {\n    return value === \"matrix(1, 0, 0, 1, 0, 0)\" || value === \"none\" || !value;\n}, _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\n    var matrixString = _getComputedProperty(target, _transformProp);\n    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numExp).map(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round);\n}, _getMatrix = function _getMatrix(target, force2D) {\n    var cache = target._gsap || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(target), style = target.style, matrix = _getComputedTransformMatrixAsArray(target), parent, nextSibling, temp, addedToDOM;\n    if (cache.svg && target.getAttribute(\"transform\")) {\n        temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like \"translate(50,60) rotate(135,0,0)\" are parsed because it mashes it into a matrix.\n        matrix = [\n            temp.a,\n            temp.b,\n            temp.c,\n            temp.d,\n            temp.e,\n            temp.f\n        ];\n        return matrix.join(\",\") === \"1,0,0,1,0,0\" ? _identity2DMatrix : matrix;\n    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\n        //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n        //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not \"none\". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).\n        temp = style.display;\n        style.display = \"block\";\n        parent = target.parentNode;\n        if (!parent || !target.offsetParent) {\n            // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375\n            addedToDOM = 1; //flag\n            nextSibling = target.nextElementSibling;\n            _docElement.appendChild(target); //we must add it to the DOM in order to get values properly\n        }\n        matrix = _getComputedTransformMatrixAsArray(target);\n        temp ? style.display = temp : _removeProperty(target, \"display\");\n        if (addedToDOM) {\n            nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\n        }\n    }\n    return force2D && matrix.length > 6 ? [\n        matrix[0],\n        matrix[1],\n        matrix[4],\n        matrix[5],\n        matrix[12],\n        matrix[13]\n    ] : matrix;\n}, _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\n    var cache = target._gsap, matrix = matrixArray || _getMatrix(target, true), xOriginOld = cache.xOrigin || 0, yOriginOld = cache.yOrigin || 0, xOffsetOld = cache.xOffset || 0, yOffsetOld = cache.yOffset || 0, a = matrix[0], b = matrix[1], c = matrix[2], d = matrix[3], tx = matrix[4], ty = matrix[5], originSplit = origin.split(\" \"), xOrigin = parseFloat(originSplit[0]) || 0, yOrigin = parseFloat(originSplit[1]) || 0, bounds, determinant, x, y;\n    if (!originIsAbsolute) {\n        bounds = _getBBox(target);\n        xOrigin = bounds.x + (~originSplit[0].indexOf(\"%\") ? xOrigin / 100 * bounds.width : xOrigin);\n        yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf(\"%\") ? yOrigin / 100 * bounds.height : yOrigin);\n    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\n        //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.\n        x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n        y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n        xOrigin = x;\n        yOrigin = y;\n    }\n    if (smooth || smooth !== false && cache.smooth) {\n        tx = xOrigin - xOriginOld;\n        ty = yOrigin - yOriginOld;\n        cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\n        cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\n    } else {\n        cache.xOffset = cache.yOffset = 0;\n    }\n    cache.xOrigin = xOrigin;\n    cache.yOrigin = yOrigin;\n    cache.smooth = !!smooth;\n    cache.origin = origin;\n    cache.originIsAbsolute = !!originIsAbsolute;\n    target.style[_transformOriginProp] = \"0px 0px\"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).\n    if (pluginToAddPropTweensTo) {\n        _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOrigin\", xOriginOld, xOrigin);\n        _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOrigin\", yOriginOld, yOrigin);\n        _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOffset\", xOffsetOld, cache.xOffset);\n        _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOffset\", yOffsetOld, cache.yOffset);\n    }\n    target.setAttribute(\"data-svg-origin\", xOrigin + \" \" + yOrigin);\n}, _parseTransform = function _parseTransform(target, uncache) {\n    var cache = target._gsap || new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.GSCache(target);\n    if (\"x\" in cache && !uncache && !cache.uncache) {\n        return cache;\n    }\n    var style = target.style, invertedScaleX = cache.scaleX < 0, px = \"px\", deg = \"deg\", cs = getComputedStyle(target), origin = _getComputedProperty(target, _transformOriginProp) || \"0\", x, y, z, scaleX, scaleY, rotation, rotationX, rotationY, skewX, skewY, perspective, xOrigin, yOrigin, matrix, angle, cos, sin, a, b, c, d, a12, a22, t1, t2, t3, a13, a23, a33, a42, a43, a32;\n    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\n    scaleX = scaleY = 1;\n    cache.svg = !!(target.getCTM && _isSVG(target));\n    if (cs.translate) {\n        // accommodate independent transforms by combining them into normal ones.\n        if (cs.translate !== \"none\" || cs.scale !== \"none\" || cs.rotate !== \"none\") {\n            style[_transformProp] = (cs.translate !== \"none\" ? \"translate3d(\" + (cs.translate + \" 0 0\").split(\" \").slice(0, 3).join(\", \") + \") \" : \"\") + (cs.rotate !== \"none\" ? \"rotate(\" + cs.rotate + \") \" : \"\") + (cs.scale !== \"none\" ? \"scale(\" + cs.scale.split(\" \").join(\",\") + \") \" : \"\") + (cs[_transformProp] !== \"none\" ? cs[_transformProp] : \"\");\n        }\n        style.scale = style.rotate = style.translate = \"none\";\n    }\n    matrix = _getMatrix(target, cache.svg);\n    if (cache.svg) {\n        if (cache.uncache) {\n            // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + \"px \" + (cache.yOrigin - bbox.y) + \"px\". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.\n            t2 = target.getBBox();\n            origin = cache.xOrigin - t2.x + \"px \" + (cache.yOrigin - t2.y) + \"px\";\n            t1 = \"\";\n        } else {\n            t1 = !uncache && target.getAttribute(\"data-svg-origin\"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.\n        }\n        _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\n    }\n    xOrigin = cache.xOrigin || 0;\n    yOrigin = cache.yOrigin || 0;\n    if (matrix !== _identity2DMatrix) {\n        a = matrix[0]; //a11\n        b = matrix[1]; //a21\n        c = matrix[2]; //a31\n        d = matrix[3]; //a41\n        x = a12 = matrix[4];\n        y = a22 = matrix[5]; //2D matrix\n        if (matrix.length === 6) {\n            scaleX = Math.sqrt(a * a + b * b);\n            scaleY = Math.sqrt(d * d + c * c);\n            rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).\n            skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\n            skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));\n            if (cache.svg) {\n                x -= xOrigin - (xOrigin * a + yOrigin * c);\n                y -= yOrigin - (xOrigin * b + yOrigin * d);\n            } //3D matrix\n        } else {\n            a32 = matrix[6];\n            a42 = matrix[7];\n            a13 = matrix[8];\n            a23 = matrix[9];\n            a33 = matrix[10];\n            a43 = matrix[11];\n            x = matrix[12];\n            y = matrix[13];\n            z = matrix[14];\n            angle = _atan2(a32, a33);\n            rotationX = angle * _RAD2DEG; //rotationX\n            if (angle) {\n                cos = Math.cos(-angle);\n                sin = Math.sin(-angle);\n                t1 = a12 * cos + a13 * sin;\n                t2 = a22 * cos + a23 * sin;\n                t3 = a32 * cos + a33 * sin;\n                a13 = a12 * -sin + a13 * cos;\n                a23 = a22 * -sin + a23 * cos;\n                a33 = a32 * -sin + a33 * cos;\n                a43 = a42 * -sin + a43 * cos;\n                a12 = t1;\n                a22 = t2;\n                a32 = t3;\n            } //rotationY\n            angle = _atan2(-c, a33);\n            rotationY = angle * _RAD2DEG;\n            if (angle) {\n                cos = Math.cos(-angle);\n                sin = Math.sin(-angle);\n                t1 = a * cos - a13 * sin;\n                t2 = b * cos - a23 * sin;\n                t3 = c * cos - a33 * sin;\n                a43 = d * sin + a43 * cos;\n                a = t1;\n                b = t2;\n                c = t3;\n            } //rotationZ\n            angle = _atan2(b, a);\n            rotation = angle * _RAD2DEG;\n            if (angle) {\n                cos = Math.cos(angle);\n                sin = Math.sin(angle);\n                t1 = a * cos + b * sin;\n                t2 = a12 * cos + a22 * sin;\n                b = b * cos - a * sin;\n                a22 = a22 * cos - a12 * sin;\n                a = t1;\n                a12 = t2;\n            }\n            if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\n                //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.\n                rotationX = rotation = 0;\n                rotationY = 180 - rotationY;\n            }\n            scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a * a + b * b + c * c));\n            scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a22 * a22 + a32 * a32));\n            angle = _atan2(a12, a22);\n            skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\n            perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n        }\n        if (cache.svg) {\n            //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).\n            t1 = target.getAttribute(\"transform\");\n            cache.forceCSS = target.setAttribute(\"transform\", \"\") || !_isNullTransform(_getComputedProperty(target, _transformProp));\n            t1 && target.setAttribute(\"transform\", t1);\n        }\n    }\n    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n        if (invertedScaleX) {\n            scaleX *= -1;\n            skewX += rotation <= 0 ? 180 : -180;\n            rotation += rotation <= 0 ? 180 : -180;\n        } else {\n            scaleY *= -1;\n            skewX += skewX <= 0 ? 180 : -180;\n        }\n    }\n    uncache = uncache || cache.uncache;\n    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\n    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\n    cache.z = z + px;\n    cache.scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleX);\n    cache.scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleY);\n    cache.rotation = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotation) + deg;\n    cache.rotationX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationX) + deg;\n    cache.rotationY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationY) + deg;\n    cache.skewX = skewX + deg;\n    cache.skewY = skewY + deg;\n    cache.transformPerspective = perspective + px;\n    if (cache.zOrigin = parseFloat(origin.split(\" \")[2]) || 0) {\n        style[_transformOriginProp] = _firstTwoOnly(origin);\n    }\n    cache.xOffset = cache.yOffset = 0;\n    cache.force3D = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.force3D;\n    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\n    cache.uncache = 0;\n    return cache;\n}, _firstTwoOnly = function _firstTwoOnly(value) {\n    return (value = value.split(\" \"))[0] + \" \" + value[1];\n}, //for handling transformOrigin values, stripping out the 3rd dimension\n_addPxTranslate = function _addPxTranslate(target, start, value) {\n    var unit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(start);\n    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(parseFloat(start) + parseFloat(_convertToUnit(target, \"x\", value + \"px\", unit))) + unit;\n}, _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\n    cache.z = \"0px\";\n    cache.rotationY = cache.rotationX = \"0deg\";\n    cache.force3D = 0;\n    _renderCSSTransforms(ratio, cache);\n}, _zeroDeg = \"0deg\", _zeroPx = \"0px\", _endParenthesis = \") \", _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\n    var _ref = cache || this, xPercent = _ref.xPercent, yPercent = _ref.yPercent, x = _ref.x, y = _ref.y, z = _ref.z, rotation = _ref.rotation, rotationY = _ref.rotationY, rotationX = _ref.rotationX, skewX = _ref.skewX, skewY = _ref.skewY, scaleX = _ref.scaleX, scaleY = _ref.scaleY, transformPerspective = _ref.transformPerspective, force3D = _ref.force3D, target = _ref.target, zOrigin = _ref.zOrigin, transforms = \"\", use3D = force3D === \"auto\" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)\n    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\n        var angle = parseFloat(rotationY) * _DEG2RAD, a13 = Math.sin(angle), a33 = Math.cos(angle), cos;\n        angle = parseFloat(rotationX) * _DEG2RAD;\n        cos = Math.cos(angle);\n        x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\n        y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\n        z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\n    }\n    if (transformPerspective !== _zeroPx) {\n        transforms += \"perspective(\" + transformPerspective + _endParenthesis;\n    }\n    if (xPercent || yPercent) {\n        transforms += \"translate(\" + xPercent + \"%, \" + yPercent + \"%) \";\n    }\n    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\n        transforms += z !== _zeroPx || use3D ? \"translate3d(\" + x + \", \" + y + \", \" + z + \") \" : \"translate(\" + x + \", \" + y + _endParenthesis;\n    }\n    if (rotation !== _zeroDeg) {\n        transforms += \"rotate(\" + rotation + _endParenthesis;\n    }\n    if (rotationY !== _zeroDeg) {\n        transforms += \"rotateY(\" + rotationY + _endParenthesis;\n    }\n    if (rotationX !== _zeroDeg) {\n        transforms += \"rotateX(\" + rotationX + _endParenthesis;\n    }\n    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\n        transforms += \"skew(\" + skewX + \", \" + skewY + _endParenthesis;\n    }\n    if (scaleX !== 1 || scaleY !== 1) {\n        transforms += \"scale(\" + scaleX + \", \" + scaleY + _endParenthesis;\n    }\n    target.style[_transformProp] = transforms || \"translate(0, 0)\";\n}, _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\n    var _ref2 = cache || this, xPercent = _ref2.xPercent, yPercent = _ref2.yPercent, x = _ref2.x, y = _ref2.y, rotation = _ref2.rotation, skewX = _ref2.skewX, skewY = _ref2.skewY, scaleX = _ref2.scaleX, scaleY = _ref2.scaleY, target = _ref2.target, xOrigin = _ref2.xOrigin, yOrigin = _ref2.yOrigin, xOffset = _ref2.xOffset, yOffset = _ref2.yOffset, forceCSS = _ref2.forceCSS, tx = parseFloat(x), ty = parseFloat(y), a11, a21, a12, a22, temp;\n    rotation = parseFloat(rotation);\n    skewX = parseFloat(skewX);\n    skewY = parseFloat(skewY);\n    if (skewY) {\n        //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.\n        skewY = parseFloat(skewY);\n        skewX += skewY;\n        rotation += skewY;\n    }\n    if (rotation || skewX) {\n        rotation *= _DEG2RAD;\n        skewX *= _DEG2RAD;\n        a11 = Math.cos(rotation) * scaleX;\n        a21 = Math.sin(rotation) * scaleX;\n        a12 = Math.sin(rotation - skewX) * -scaleY;\n        a22 = Math.cos(rotation - skewX) * scaleY;\n        if (skewX) {\n            skewY *= _DEG2RAD;\n            temp = Math.tan(skewX - skewY);\n            temp = Math.sqrt(1 + temp * temp);\n            a12 *= temp;\n            a22 *= temp;\n            if (skewY) {\n                temp = Math.tan(skewY);\n                temp = Math.sqrt(1 + temp * temp);\n                a11 *= temp;\n                a21 *= temp;\n            }\n        }\n        a11 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a11);\n        a21 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a21);\n        a12 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a12);\n        a22 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a22);\n    } else {\n        a11 = scaleX;\n        a22 = scaleY;\n        a21 = a12 = 0;\n    }\n    if (tx && !~(x + \"\").indexOf(\"px\") || ty && !~(y + \"\").indexOf(\"px\")) {\n        tx = _convertToUnit(target, \"x\", x, \"px\");\n        ty = _convertToUnit(target, \"y\", y, \"px\");\n    }\n    if (xOrigin || yOrigin || xOffset || yOffset) {\n        tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\n        ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\n    }\n    if (xPercent || yPercent) {\n        //The SVG spec doesn't support percentage-based translation in the \"transform\" attribute, so we merge it into the translation to simulate it.\n        temp = target.getBBox();\n        tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xPercent / 100 * temp.width);\n        ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yPercent / 100 * temp.height);\n    }\n    temp = \"matrix(\" + a11 + \",\" + a21 + \",\" + a12 + \",\" + a22 + \",\" + tx + \",\" + ty + \")\";\n    target.setAttribute(\"transform\", temp);\n    forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)\n}, _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {\n    var cap = 360, isString = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(endValue), endNum = parseFloat(endValue) * (isString && ~endValue.indexOf(\"rad\") ? _RAD2DEG : 1), change = endNum - startNum, finalValue = startNum + change + \"deg\", direction, pt;\n    if (isString) {\n        direction = endValue.split(\"_\")[1];\n        if (direction === \"short\") {\n            change %= cap;\n            if (change !== change % (cap / 2)) {\n                change += change < 0 ? cap : -cap;\n            }\n        }\n        if (direction === \"cw\" && change < 0) {\n            change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;\n        } else if (direction === \"ccw\" && change > 0) {\n            change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;\n        }\n    }\n    plugin._pt = pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n    pt.e = finalValue;\n    pt.u = \"deg\";\n    plugin._props.push(property);\n    return pt;\n}, _assign = function _assign(target, source) {\n    // Internet Explorer doesn't have Object.assign(), so we recreate it here.\n    for(var p in source){\n        target[p] = source[p];\n    }\n    return target;\n}, _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\n    //for handling cases where someone passes in a whole transform string, like transform: \"scale(2, 3) rotate(20deg) translateY(30em)\"\n    var startCache = _assign({}, target._gsap), exclude = \"perspective,force3D,transformOrigin,svgOrigin\", style = target.style, endCache, p, startValue, endValue, startNum, endNum, startUnit, endUnit;\n    if (startCache.svg) {\n        startValue = target.getAttribute(\"transform\");\n        target.setAttribute(\"transform\", \"\");\n        style[_transformProp] = transforms;\n        endCache = _parseTransform(target, 1);\n        _removeProperty(target, _transformProp);\n        target.setAttribute(\"transform\", startValue);\n    } else {\n        startValue = getComputedStyle(target)[_transformProp];\n        style[_transformProp] = transforms;\n        endCache = _parseTransform(target, 1);\n        style[_transformProp] = startValue;\n    }\n    for(p in _transformProps){\n        startValue = startCache[p];\n        endValue = endCache[p];\n        if (startValue !== endValue && exclude.indexOf(p) < 0) {\n            //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.\n            startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);\n            endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);\n            startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\n            endNum = parseFloat(endValue);\n            plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);\n            plugin._pt.u = endUnit || 0;\n            plugin._props.push(p);\n        }\n    }\n    _assign(endCache, startCache);\n}; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.\n(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(\"padding,margin,Width,Radius\", function(name, index) {\n    var t = \"Top\", r = \"Right\", b = \"Bottom\", l = \"Left\", props = (index < 3 ? [\n        t,\n        r,\n        b,\n        l\n    ] : [\n        t + l,\n        t + r,\n        b + r,\n        b + l\n    ]).map(function(side) {\n        return index < 2 ? name + side : \"border\" + side + name;\n    });\n    _specialProps[index > 1 ? \"border\" + name : name] = function(plugin, target, property, endValue, tween) {\n        var a, vars;\n        if (arguments.length < 4) {\n            // getter, passed target, property, and unit (from _get())\n            a = props.map(function(prop) {\n                return _get(plugin, prop, property);\n            });\n            vars = a.join(\" \");\n            return vars.split(a[0]).length === 5 ? a[0] : vars;\n        }\n        a = (endValue + \"\").split(\" \");\n        vars = {};\n        props.forEach(function(prop, i) {\n            return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\n        });\n        plugin.init(target, vars, tween);\n    };\n});\nvar CSSPlugin = {\n    name: \"css\",\n    register: _initCore,\n    targetTest: function targetTest(target) {\n        return target.style && target.nodeType;\n    },\n    init: function init(target, vars, tween, index, targets) {\n        var props = this._props, style = target.style, startAt = tween.vars.startAt, startValue, endValue, endNum, startNum, type, specialProp, p, startUnit, endUnit, relative, isTransformRelated, transformPropTween, cache, smooth, hasPriority, inlineProps;\n        _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps\n        this.styles = this.styles || _getStyleSaver(target);\n        inlineProps = this.styles.props;\n        this.tween = tween;\n        for(p in vars){\n            if (p === \"autoRound\") {\n                continue;\n            }\n            endValue = vars[p];\n            if (_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._plugins[p] && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._checkPlugin)(p, vars, tween, index, target, targets)) {\n                continue;\n            }\n            type = typeof endValue;\n            specialProp = _specialProps[p];\n            if (type === \"function\") {\n                endValue = endValue.call(tween, index, target, targets);\n                type = typeof endValue;\n            }\n            if (type === \"string\" && ~endValue.indexOf(\"random(\")) {\n                endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(endValue);\n            }\n            if (specialProp) {\n                specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\n            } else if (p.substr(0, 2) === \"--\") {\n                //CSS variable\n                startValue = (getComputedStyle(target).getPropertyValue(p) + \"\").trim();\n                endValue += \"\";\n                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.lastIndex = 0;\n                if (!_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.test(startValue)) {\n                    // colors don't have units\n                    startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);\n                    endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);\n                }\n                endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\n                this.add(style, \"setProperty\", startValue, endValue, index, targets, 0, 0, p);\n                props.push(p);\n                inlineProps.push(p, 0, style[p]);\n            } else if (type !== \"undefined\") {\n                if (startAt && p in startAt) {\n                    // in case someone hard-codes a complex value as the start, like top: \"calc(2vh / 2)\". Without this, it'd use the computed value (always in px)\n                    startValue = typeof startAt[p] === \"function\" ? startAt[p].call(tween, index, target, targets) : startAt[p];\n                    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(startValue) && ~startValue.indexOf(\"random(\") && (startValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(startValue));\n                    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue + \"\") || (startValue += _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(_get(target, p)) || \"\"); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.\n                    (startValue + \"\").charAt(1) === \"=\" && (startValue = _get(target, p)); // can't work with relative values\n                } else {\n                    startValue = _get(target, p);\n                }\n                startNum = parseFloat(startValue);\n                relative = type === \"string\" && endValue.charAt(1) === \"=\" && endValue.substr(0, 2);\n                relative && (endValue = endValue.substr(2));\n                endNum = parseFloat(endValue);\n                if (p in _propertyAliases) {\n                    if (p === \"autoAlpha\") {\n                        //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.\n                        if (startNum === 1 && _get(target, \"visibility\") === \"hidden\" && endNum) {\n                            //if visibility is initially set to \"hidden\", we should interpret that as intent to make opacity 0 (a convenience)\n                            startNum = 0;\n                        }\n                        inlineProps.push(\"visibility\", 0, style.visibility);\n                        _addNonTweeningPT(this, style, \"visibility\", startNum ? \"inherit\" : \"hidden\", endNum ? \"inherit\" : \"hidden\", !endNum);\n                    }\n                    if (p !== \"scale\" && p !== \"transform\") {\n                        p = _propertyAliases[p];\n                        ~p.indexOf(\",\") && (p = p.split(\",\")[0]);\n                    }\n                }\n                isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---\n                if (isTransformRelated) {\n                    this.styles.save(p);\n                    if (!transformPropTween) {\n                        cache = target._gsap;\n                        cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:\"translateX(50vw)\"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.\n                        smooth = vars.smoothOrigin !== false && cache.smooth;\n                        transformPropTween = this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)\n                        transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.\n                    }\n                    if (p === \"scale\") {\n                        this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, cache, \"scaleY\", cache.scaleY, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);\n                        this._pt.u = 0;\n                        props.push(\"scaleY\", p);\n                        p += \"X\";\n                    } else if (p === \"transformOrigin\") {\n                        inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);\n                        endValue = _convertKeywordsToPercentages(endValue); //in case something like \"left top\" or \"bottom right\" is passed in. Convert to percentages.\n                        if (cache.svg) {\n                            _applySVGOrigin(target, endValue, 0, smooth, 0, this);\n                        } else {\n                            endUnit = parseFloat(endValue.split(\" \")[2]) || 0; //handle the zOrigin separately!\n                            endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, \"zOrigin\", cache.zOrigin, endUnit);\n                            _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\n                        }\n                        continue;\n                    } else if (p === \"svgOrigin\") {\n                        _applySVGOrigin(target, endValue, 1, smooth, 0, this);\n                        continue;\n                    } else if (p in _rotationalProperties) {\n                        _addRotationalPropTween(this, cache, p, startNum, relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endValue) : endValue);\n                        continue;\n                    } else if (p === \"smoothOrigin\") {\n                        _addNonTweeningPT(this, cache, \"smooth\", cache.smooth, endValue);\n                        continue;\n                    } else if (p === \"force3D\") {\n                        cache[p] = endValue;\n                        continue;\n                    } else if (p === \"transform\") {\n                        _addRawTransformPTs(this, endValue, target);\n                        continue;\n                    }\n                } else if (!(p in style)) {\n                    p = _checkPropPrefix(p) || p;\n                }\n                if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\n                    startUnit = (startValue + \"\").substr((startNum + \"\").length);\n                    endNum || (endNum = 0); // protect against NaN\n                    endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue) || (p in _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units ? _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] : startUnit);\n                    startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\n                    this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === \"px\" || p === \"zIndex\") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\n                    this._pt.u = endUnit || 0;\n                    if (startUnit !== endUnit && endUnit !== \"%\") {\n                        //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a \"b\" (beginning) property and point to a render method that handles that. (performance optimization)\n                        this._pt.b = startValue;\n                        this._pt.r = _renderCSSPropWithBeginning;\n                    }\n                } else if (!(p in style)) {\n                    if (p in target) {\n                        //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.\n                        this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);\n                    } else if (p !== \"parseTransform\") {\n                        (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._missingPlugin)(p, endValue);\n                        continue;\n                    }\n                } else {\n                    _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);\n                }\n                isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));\n                props.push(p);\n            }\n        }\n        hasPriority && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._sortPropTweensByPriority)(this);\n    },\n    render: function render(ratio, data) {\n        if (data.tween._time || !_reverting()) {\n            var pt = data._pt;\n            while(pt){\n                pt.r(ratio, pt.d);\n                pt = pt._next;\n            }\n        } else {\n            data.styles.revert();\n        }\n    },\n    get: _get,\n    aliases: _propertyAliases,\n    getSetter: function getSetter(target, property, plugin) {\n        //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like \"x\" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.\n        var p = _propertyAliases[property];\n        p && p.indexOf(\",\") < 0 && (property = p);\n        return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, \"x\")) ? plugin && _recentSetterPlugin === plugin ? property === \"scale\" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === \"scale\" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isUndefined)(target.style[property]) ? _setterCSSStyle : ~property.indexOf(\"-\") ? _setterCSSProp : (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getSetter)(target, property);\n    },\n    core: {\n        _removeProperty: _removeProperty,\n        _getMatrix: _getMatrix\n    }\n};\n_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.utils.checkPrefix = _checkPropPrefix;\n_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getStyleSaver = _getStyleSaver;\n(function(positionAndScale, rotation, others, aliases) {\n    var all = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(positionAndScale + \",\" + rotation + \",\" + others, function(name) {\n        _transformProps[name] = 1;\n    });\n    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(rotation, function(name) {\n        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = \"deg\";\n        _rotationalProperties[name] = 1;\n    });\n    _propertyAliases[all[13]] = positionAndScale + \",\" + rotation;\n    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(aliases, function(name) {\n        var split = name.split(\":\");\n        _propertyAliases[split[1]] = all[split[0]];\n    });\n})(\"x,y,z,scale,scaleX,scaleY,xPercent,yPercent\", \"rotation,rotationX,rotationY,skewX,skewY\", \"transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective\", \"0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY\");\n(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(\"x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective\", function(name) {\n    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = \"px\";\n});\n_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(CSSPlugin);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/CSSPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gsap/gsap-core.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/gsap-core.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Animation: () => (/* binding */ Animation),\n/* harmony export */   Back: () => (/* binding */ Back),\n/* harmony export */   Bounce: () => (/* binding */ Bounce),\n/* harmony export */   Circ: () => (/* binding */ Circ),\n/* harmony export */   Cubic: () => (/* binding */ Cubic),\n/* harmony export */   Elastic: () => (/* binding */ Elastic),\n/* harmony export */   Expo: () => (/* binding */ Expo),\n/* harmony export */   GSCache: () => (/* binding */ GSCache),\n/* harmony export */   Linear: () => (/* binding */ Linear),\n/* harmony export */   Power0: () => (/* binding */ Power0),\n/* harmony export */   Power1: () => (/* binding */ Power1),\n/* harmony export */   Power2: () => (/* binding */ Power2),\n/* harmony export */   Power3: () => (/* binding */ Power3),\n/* harmony export */   Power4: () => (/* binding */ Power4),\n/* harmony export */   PropTween: () => (/* binding */ PropTween),\n/* harmony export */   Quad: () => (/* binding */ Quad),\n/* harmony export */   Quart: () => (/* binding */ Quart),\n/* harmony export */   Quint: () => (/* binding */ Quint),\n/* harmony export */   Sine: () => (/* binding */ Sine),\n/* harmony export */   SteppedEase: () => (/* binding */ SteppedEase),\n/* harmony export */   Strong: () => (/* binding */ Strong),\n/* harmony export */   Timeline: () => (/* binding */ Timeline),\n/* harmony export */   TimelineLite: () => (/* binding */ Timeline),\n/* harmony export */   TimelineMax: () => (/* binding */ Timeline),\n/* harmony export */   Tween: () => (/* binding */ Tween),\n/* harmony export */   TweenLite: () => (/* binding */ Tween),\n/* harmony export */   TweenMax: () => (/* binding */ Tween),\n/* harmony export */   _checkPlugin: () => (/* binding */ _checkPlugin),\n/* harmony export */   _colorExp: () => (/* binding */ _colorExp),\n/* harmony export */   _colorStringFilter: () => (/* binding */ _colorStringFilter),\n/* harmony export */   _config: () => (/* binding */ _config),\n/* harmony export */   _forEachName: () => (/* binding */ _forEachName),\n/* harmony export */   _getCache: () => (/* binding */ _getCache),\n/* harmony export */   _getProperty: () => (/* binding */ _getProperty),\n/* harmony export */   _getSetter: () => (/* binding */ _getSetter),\n/* harmony export */   _isString: () => (/* binding */ _isString),\n/* harmony export */   _isUndefined: () => (/* binding */ _isUndefined),\n/* harmony export */   _missingPlugin: () => (/* binding */ _missingPlugin),\n/* harmony export */   _numExp: () => (/* binding */ _numExp),\n/* harmony export */   _numWithUnitExp: () => (/* binding */ _numWithUnitExp),\n/* harmony export */   _parseRelative: () => (/* binding */ _parseRelative),\n/* harmony export */   _plugins: () => (/* binding */ _plugins),\n/* harmony export */   _relExp: () => (/* binding */ _relExp),\n/* harmony export */   _removeLinkedListItem: () => (/* binding */ _removeLinkedListItem),\n/* harmony export */   _renderComplexString: () => (/* binding */ _renderComplexString),\n/* harmony export */   _replaceRandom: () => (/* binding */ _replaceRandom),\n/* harmony export */   _round: () => (/* binding */ _round),\n/* harmony export */   _roundModifier: () => (/* binding */ _roundModifier),\n/* harmony export */   _setDefaults: () => (/* binding */ _setDefaults),\n/* harmony export */   _sortPropTweensByPriority: () => (/* binding */ _sortPropTweensByPriority),\n/* harmony export */   _ticker: () => (/* binding */ _ticker),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   \"default\": () => (/* binding */ gsap),\n/* harmony export */   distribute: () => (/* binding */ distribute),\n/* harmony export */   getUnit: () => (/* binding */ getUnit),\n/* harmony export */   gsap: () => (/* binding */ gsap),\n/* harmony export */   interpolate: () => (/* binding */ interpolate),\n/* harmony export */   mapRange: () => (/* binding */ mapRange),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   pipe: () => (/* binding */ pipe),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   selector: () => (/* binding */ selector),\n/* harmony export */   shuffle: () => (/* binding */ shuffle),\n/* harmony export */   snap: () => (/* binding */ snap),\n/* harmony export */   splitColor: () => (/* binding */ splitColor),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   unitize: () => (/* binding */ unitize),\n/* harmony export */   wrap: () => (/* binding */ wrap),\n/* harmony export */   wrapYoyo: () => (/* binding */ wrapYoyo)\n/* harmony export */ });\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\n/*!\n * GSAP 3.12.2\n * https://greensock.com\n *\n * @license Copyright 2008-2023, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/ /* eslint-disable */ var _config = {\n    autoSleep: 120,\n    force3D: \"auto\",\n    nullTargetWarn: 1,\n    units: {\n        lineHeight: \"\"\n    }\n}, _defaults = {\n    duration: .5,\n    overwrite: false,\n    delay: 0\n}, _suppressOverwrites, _reverting, _context, _bigNum = 1e8, _tinyNum = 1 / _bigNum, _2PI = Math.PI * 2, _HALF_PI = _2PI / 4, _gsID = 0, _sqrt = Math.sqrt, _cos = Math.cos, _sin = Math.sin, _isString = function _isString(value) {\n    return typeof value === \"string\";\n}, _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n}, _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n}, _isUndefined = function _isUndefined(value) {\n    return typeof value === \"undefined\";\n}, _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n}, _isNotFalse = function _isNotFalse(value) {\n    return value !== false;\n}, _windowExists = function _windowExists() {\n    return \"undefined\" !== \"undefined\";\n}, _isFuncOrString = function _isFuncOrString(value) {\n    return _isFunction(value) || _isString(value);\n}, _isTypedArray = typeof ArrayBuffer === \"function\" && ArrayBuffer.isView || function() {}, // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().\n_isArray = Array.isArray, _strictNumExp = /(?:-?\\.?\\d|\\.)+/gi, //only numbers (including negatives and decimals) but NOT relative values.\n_numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/g, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.\n_numWithUnitExp = /[-+=.]*\\d+[.e-]*\\d*[a-z%]*/g, _complexStringNumExp = /[-+=.]*\\d+\\.?\\d*(?:e-|e\\+)?\\d*/gi, //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.\n_relExp = /[+-]=-?[.\\d]+/, _delimitedValueExp = /[^,'\"\\[\\]\\s]+/gi, // previously /[#\\-+.]*\\b[a-z\\d\\-=+%.]+/gi but didn't catch special characters.\n_unitExp = /^[+\\-=e\\s\\d]*\\d+[.\\d]*([a-z]*|%)\\s*$/i, _globalTimeline, _win, _coreInitted, _doc, _globals = {}, _installScope = {}, _coreReady, _install = function _install(scope) {\n    return (_installScope = _merge(scope, _globals)) && gsap;\n}, _missingPlugin = function _missingPlugin(property, value) {\n    return console.warn(\"Invalid property\", property, \"set to\", value, \"Missing plugin? gsap.registerPlugin()\");\n}, _warn = function _warn(message, suppress) {\n    return !suppress && console.warn(message);\n}, _addGlobal = function _addGlobal(name, obj) {\n    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;\n}, _emptyFunc = function _emptyFunc() {\n    return 0;\n}, _startAtRevertConfig = {\n    suppressEvents: true,\n    isStart: true,\n    kill: false\n}, _revertConfigNoKill = {\n    suppressEvents: true,\n    kill: false\n}, _revertConfig = {\n    suppressEvents: true\n}, _reservedProps = {}, _lazyTweens = [], _lazyLookup = {}, _lastRenderedFrame, _plugins = {}, _effects = {}, _nextGCFrame = 30, _harnessPlugins = [], _callbackNames = \"\", _harness = function _harness(targets) {\n    var target = targets[0], harnessPlugin, i;\n    _isObject(target) || _isFunction(target) || (targets = [\n        targets\n    ]);\n    if (!(harnessPlugin = (target._gsap || {}).harness)) {\n        // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)\n        i = _harnessPlugins.length;\n        while(i-- && !_harnessPlugins[i].targetTest(target)){}\n        harnessPlugin = _harnessPlugins[i];\n    }\n    i = targets.length;\n    while(i--){\n        targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);\n    }\n    return targets;\n}, _getCache = function _getCache(target) {\n    return target._gsap || _harness(toArray(target))[0]._gsap;\n}, _getProperty = function _getProperty(target, property, v) {\n    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;\n}, _forEachName = function _forEachName(names, func) {\n    return (names = names.split(\",\")).forEach(func) || names;\n}, //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).\n_round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n}, _roundPrecise = function _roundPrecise(value) {\n    return Math.round(value * 10000000) / 10000000 || 0;\n}, // increased precision mostly for timing values.\n_parseRelative = function _parseRelative(start, value) {\n    var operator = value.charAt(0), end = parseFloat(value.substr(2));\n    start = parseFloat(start);\n    return operator === \"+\" ? start + end : operator === \"-\" ? start - end : operator === \"*\" ? start * end : start / end;\n}, _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {\n    //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.\n    var l = toFind.length, i = 0;\n    for(; toSearch.indexOf(toFind[i]) < 0 && ++i < l;){}\n    return i < l;\n}, _lazyRender = function _lazyRender() {\n    var l = _lazyTweens.length, a = _lazyTweens.slice(0), i, tween;\n    _lazyLookup = {};\n    _lazyTweens.length = 0;\n    for(i = 0; i < l; i++){\n        tween = a[i];\n        tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);\n    }\n}, _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {\n    _lazyTweens.length && !_reverting && _lazyRender();\n    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));\n    _lazyTweens.length && !_reverting && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.\n}, _numericIfPossible = function _numericIfPossible(value) {\n    var n = parseFloat(value);\n    return (n || n === 0) && (value + \"\").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;\n}, _passThrough = function _passThrough(p) {\n    return p;\n}, _setDefaults = function _setDefaults(obj, defaults) {\n    for(var p in defaults){\n        p in obj || (obj[p] = defaults[p]);\n    }\n    return obj;\n}, _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {\n    return function(obj, defaults) {\n        for(var p in defaults){\n            p in obj || p === \"duration\" && excludeDuration || p === \"ease\" || (obj[p] = defaults[p]);\n        }\n    };\n}, _merge = function _merge(base, toMerge) {\n    for(var p in toMerge){\n        base[p] = toMerge[p];\n    }\n    return base;\n}, _mergeDeep = function _mergeDeep(base, toMerge) {\n    for(var p in toMerge){\n        p !== \"__proto__\" && p !== \"constructor\" && p !== \"prototype\" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);\n    }\n    return base;\n}, _copyExcluding = function _copyExcluding(obj, excluding) {\n    var copy = {}, p;\n    for(p in obj){\n        p in excluding || (copy[p] = obj[p]);\n    }\n    return copy;\n}, _inheritDefaults = function _inheritDefaults(vars) {\n    var parent = vars.parent || _globalTimeline, func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;\n    if (_isNotFalse(vars.inherit)) {\n        while(parent){\n            func(vars, parent.vars.defaults);\n            parent = parent.parent || parent._dp;\n        }\n    }\n    return vars;\n}, _arraysMatch = function _arraysMatch(a1, a2) {\n    var i = a1.length, match = i === a2.length;\n    while(match && i-- && a1[i] === a2[i]){}\n    return i < 0;\n}, _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {\n    if (firstProp === void 0) {\n        firstProp = \"_first\";\n    }\n    if (lastProp === void 0) {\n        lastProp = \"_last\";\n    }\n    var prev = parent[lastProp], t;\n    if (sortBy) {\n        t = child[sortBy];\n        while(prev && prev[sortBy] > t){\n            prev = prev._prev;\n        }\n    }\n    if (prev) {\n        child._next = prev._next;\n        prev._next = child;\n    } else {\n        child._next = parent[firstProp];\n        parent[firstProp] = child;\n    }\n    if (child._next) {\n        child._next._prev = child;\n    } else {\n        parent[lastProp] = child;\n    }\n    child._prev = prev;\n    child.parent = child._dp = parent;\n    return child;\n}, _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {\n    if (firstProp === void 0) {\n        firstProp = \"_first\";\n    }\n    if (lastProp === void 0) {\n        lastProp = \"_last\";\n    }\n    var prev = child._prev, next = child._next;\n    if (prev) {\n        prev._next = next;\n    } else if (parent[firstProp] === child) {\n        parent[firstProp] = next;\n    }\n    if (next) {\n        next._prev = prev;\n    } else if (parent[lastProp] === child) {\n        parent[lastProp] = prev;\n    }\n    child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.\n}, _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {\n    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);\n    child._act = 0;\n}, _uncache = function _uncache(animation, child) {\n    if (animation && (!child || child._end > animation._dur || child._start < 0)) {\n        // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)\n        var a = animation;\n        while(a){\n            a._dirty = 1;\n            a = a.parent;\n        }\n    }\n    return animation;\n}, _recacheAncestors = function _recacheAncestors(animation) {\n    var parent = animation.parent;\n    while(parent && parent.parent){\n        //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.\n        parent._dirty = 1;\n        parent.totalDuration();\n        parent = parent.parent;\n    }\n    return animation;\n}, _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {\n    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));\n}, _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {\n    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);\n}, _elapsedCycleDuration = function _elapsedCycleDuration(animation) {\n    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;\n}, // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.\n_animationCycle = function _animationCycle(tTime, cycleDuration) {\n    var whole = Math.floor(tTime /= cycleDuration);\n    return tTime && whole === tTime ? whole - 1 : whole;\n}, _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {\n    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);\n}, _setEnd = function _setEnd(animation) {\n    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));\n}, _alignPlayhead = function _alignPlayhead(animation, totalTime) {\n    // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.\n    var parent = animation._dp;\n    if (parent && parent.smoothChildTiming && animation._ts) {\n        animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));\n        _setEnd(animation);\n        parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.\n    }\n    return animation;\n}, /*\n_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {\n\tlet cycleDuration = duration + repeatDelay,\n\t\ttime = _round(clampedTotalTime % cycleDuration);\n\tif (time > duration) {\n\t\ttime = duration;\n\t}\n\treturn (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;\n},\n*/ _postAddChecks = function _postAddChecks(timeline, child) {\n    var t;\n    if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {\n        // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).\n        t = _parentToChildTotalTime(timeline.rawTime(), child);\n        if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {\n            child.render(t, true);\n        }\n    } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.\n    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {\n        //in case any of the ancestors had completed but should now be enabled...\n        if (timeline._dur < timeline.duration()) {\n            t = timeline;\n            while(t._dp){\n                t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.\n                t = t._dp;\n            }\n        }\n        timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.\n    }\n}, _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {\n    child.parent && _removeFromParent(child);\n    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);\n    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));\n    _addLinkedListItem(timeline, child, \"_first\", \"_last\", timeline._sort ? \"_start\" : 0);\n    _isFromOrFromStart(child) || (timeline._recent = child);\n    skipChecks || _postAddChecks(timeline, child);\n    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)\n    return timeline;\n}, _scrollTrigger = function _scrollTrigger(animation, trigger) {\n    return (_globals.ScrollTrigger || _missingPlugin(\"scrollTrigger\", trigger)) && _globals.ScrollTrigger.create(trigger, animation);\n}, _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {\n    _initTween(tween, time, tTime);\n    if (!tween._initted) {\n        return 1;\n    }\n    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {\n        _lazyTweens.push(tween);\n        tween._lazy = [\n            tTime,\n            suppressEvents\n        ];\n        return 1;\n    }\n}, _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {\n    var parent = _ref.parent;\n    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));\n}, // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0\n_isFromOrFromStart = function _isFromOrFromStart(_ref2) {\n    var data = _ref2.data;\n    return data === \"isFromStart\" || data === \"isStart\";\n}, _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {\n    var prevRatio = tween.ratio, ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1, // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the \"startAt\" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any \"from\" and \"fromTo\" startAt tweens are rendered the first time at a ratio of 1.\n    repeatDelay = tween._rDelay, tTime = 0, pt, iteration, prevIteration;\n    if (repeatDelay && tween._repeat) {\n        // in case there's a zero-duration tween that has a repeat with a repeatDelay\n        tTime = _clamp(0, tween._tDur, totalTime);\n        iteration = _animationCycle(tTime, repeatDelay);\n        tween._yoyo && iteration & 1 && (ratio = 1 - ratio);\n        if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {\n            // if iteration changed\n            prevRatio = 1 - ratio;\n            tween.vars.repeatRefresh && tween._initted && tween.invalidate();\n        }\n    }\n    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {\n        if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {\n            // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.\n            return;\n        }\n        prevIteration = tween._zTime;\n        tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.\n        suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.\n        tween.ratio = ratio;\n        tween._from && (ratio = 1 - ratio);\n        tween._time = 0;\n        tween._tTime = tTime;\n        pt = tween._pt;\n        while(pt){\n            pt.r(ratio, pt.d);\n            pt = pt._next;\n        }\n        totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);\n        tween._onUpdate && !suppressEvents && _callback(tween, \"onUpdate\");\n        tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, \"onRepeat\");\n        if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {\n            ratio && _removeFromParent(tween, 1);\n            if (!suppressEvents && !_reverting) {\n                _callback(tween, ratio ? \"onComplete\" : \"onReverseComplete\", true);\n                tween._prom && tween._prom();\n            }\n        }\n    } else if (!tween._zTime) {\n        tween._zTime = totalTime;\n    }\n}, _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {\n    var child;\n    if (time > prevTime) {\n        child = animation._first;\n        while(child && child._start <= time){\n            if (child.data === \"isPause\" && child._start > prevTime) {\n                return child;\n            }\n            child = child._next;\n        }\n    } else {\n        child = animation._last;\n        while(child && child._start >= time){\n            if (child.data === \"isPause\" && child._start < prevTime) {\n                return child;\n            }\n            child = child._prev;\n        }\n    }\n}, _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {\n    var repeat = animation._repeat, dur = _roundPrecise(duration) || 0, totalProgress = animation._tTime / animation._tDur;\n    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);\n    animation._dur = dur;\n    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);\n    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);\n    animation.parent && _setEnd(animation);\n    skipUncache || _uncache(animation.parent, animation);\n    return animation;\n}, _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {\n    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);\n}, _zeroPosition = {\n    _start: 0,\n    endTime: _emptyFunc,\n    totalDuration: _emptyFunc\n}, _parsePosition = function _parsePosition(animation, position, percentAnimation) {\n    var labels = animation.labels, recent = animation._recent || _zeroPosition, clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur, //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.\n    i, offset, isPercent;\n    if (_isString(position) && (isNaN(position) || position in labels)) {\n        //if the string is a number like \"1\", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).\n        offset = position.charAt(0);\n        isPercent = position.substr(-1) === \"%\";\n        i = position.indexOf(\"=\");\n        if (offset === \"<\" || offset === \">\") {\n            i >= 0 && (position = position.replace(/=/, \"\"));\n            return (offset === \"<\" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);\n        }\n        if (i < 0) {\n            position in labels || (labels[position] = clippedDuration);\n            return labels[position];\n        }\n        offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));\n        if (isPercent && percentAnimation) {\n            offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();\n        }\n        return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;\n    }\n    return position == null ? clippedDuration : +position;\n}, _createTweenType = function _createTweenType(type, params, timeline) {\n    var isLegacy = _isNumber(params[1]), varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1), vars = params[varsIndex], irVars, parent;\n    isLegacy && (vars.duration = params[1]);\n    vars.parent = timeline;\n    if (type) {\n        irVars = vars;\n        parent = timeline;\n        while(parent && !(\"immediateRender\" in irVars)){\n            // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.\n            irVars = parent.vars.defaults || {};\n            parent = _isNotFalse(parent.vars.inherit) && parent.parent;\n        }\n        vars.immediateRender = _isNotFalse(irVars.immediateRender);\n        type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // \"from\" vars\n    }\n    return new Tween(params[0], vars, params[varsIndex + 1]);\n}, _conditionalReturn = function _conditionalReturn(value, func) {\n    return value || value === 0 ? func(value) : func;\n}, _clamp = function _clamp(min, max, value) {\n    return value < min ? min : value > max ? max : value;\n}, getUnit = function getUnit(value, v) {\n    return !_isString(value) || !(v = _unitExp.exec(value)) ? \"\" : v[1];\n}, // note: protect against padded numbers as strings, like \"100.100\". That shouldn't return \"00\" as the unit. If it's numeric, return no unit.\nclamp = function clamp(min, max, value) {\n    return _conditionalReturn(value, function(v) {\n        return _clamp(min, max, v);\n    });\n}, _slice = [].slice, _isArrayLike = function _isArrayLike(value, nonEmpty) {\n    return value && _isObject(value) && \"length\" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;\n}, _flatten = function _flatten(ar, leaveStrings, accumulator) {\n    if (accumulator === void 0) {\n        accumulator = [];\n    }\n    return ar.forEach(function(value) {\n        var _accumulator;\n        return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);\n    }) || accumulator;\n}, //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.\ntoArray = function toArray(value, scope, leaveStrings) {\n    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [\n        value\n    ] : [];\n}, selector = function selector(value) {\n    value = toArray(value)[0] || _warn(\"Invalid scope\") || {};\n    return function(v) {\n        var el = value.current || value.nativeElement || value;\n        return toArray(v, el.querySelectorAll ? el : el === value ? _warn(\"Invalid scope\") || _doc.createElement(\"div\") : value);\n    };\n}, shuffle = function shuffle(a) {\n    return a.sort(function() {\n        return .5 - Math.random();\n    });\n}, // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;\n//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following\ndistribute = function distribute(v) {\n    if (_isFunction(v)) {\n        return v;\n    }\n    var vars = _isObject(v) ? v : {\n        each: v\n    }, //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total \"amount\" that's chunked out among them all.\n    ease = _parseEase(vars.ease), from = vars.from || 0, base = parseFloat(vars.base) || 0, cache = {}, isDecimal = from > 0 && from < 1, ratios = isNaN(from) || isDecimal, axis = vars.axis, ratioX = from, ratioY = from;\n    if (_isString(from)) {\n        ratioX = ratioY = ({\n            center: .5,\n            edges: .5,\n            end: 1\n        })[from] || 0;\n    } else if (!isDecimal && ratios) {\n        ratioX = from[0];\n        ratioY = from[1];\n    }\n    return function(i, target, a) {\n        var l = (a || vars).length, distances = cache[l], originX, originY, x, y, d, j, max, min, wrapAt;\n        if (!distances) {\n            wrapAt = vars.grid === \"auto\" ? 0 : (vars.grid || [\n                1,\n                _bigNum\n            ])[1];\n            if (!wrapAt) {\n                max = -_bigNum;\n                while(max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l){}\n                wrapAt--;\n            }\n            distances = cache[l] = [];\n            originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;\n            originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;\n            max = 0;\n            min = _bigNum;\n            for(j = 0; j < l; j++){\n                x = j % wrapAt - originX;\n                y = originY - (j / wrapAt | 0);\n                distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === \"y\" ? y : x);\n                d > max && (max = d);\n                d < min && (min = d);\n            }\n            from === \"random\" && shuffle(distances);\n            distances.max = max - min;\n            distances.min = min;\n            distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === \"y\" ? l / wrapAt : wrapAt) || 0) * (from === \"edges\" ? -1 : 1);\n            distances.b = l < 0 ? base - l : base;\n            distances.u = getUnit(vars.amount || vars.each) || 0; //unit\n            ease = ease && l < 0 ? _invertEase(ease) : ease;\n        }\n        l = (distances[i] - distances.min) / distances.max || 0;\n        return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors\n    };\n}, _roundModifier = function _roundModifier(v) {\n    //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.\n    var p = Math.pow(10, ((v + \"\").split(\".\")[1] || \"\").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())\n    return function(raw) {\n        var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);\n        return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!\n    };\n}, snap = function snap(snapTo, value) {\n    var isArray = _isArray(snapTo), radius, is2D;\n    if (!isArray && _isObject(snapTo)) {\n        radius = isArray = snapTo.radius || _bigNum;\n        if (snapTo.values) {\n            snapTo = toArray(snapTo.values);\n            if (is2D = !_isNumber(snapTo[0])) {\n                radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.\n            }\n        } else {\n            snapTo = _roundModifier(snapTo.increment);\n        }\n    }\n    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function(raw) {\n        is2D = snapTo(raw);\n        return Math.abs(is2D - raw) <= radius ? is2D : raw;\n    } : function(raw) {\n        var x = parseFloat(is2D ? raw.x : raw), y = parseFloat(is2D ? raw.y : 0), min = _bigNum, closest = 0, i = snapTo.length, dx, dy;\n        while(i--){\n            if (is2D) {\n                dx = snapTo[i].x - x;\n                dy = snapTo[i].y - y;\n                dx = dx * dx + dy * dy;\n            } else {\n                dx = Math.abs(snapTo[i] - x);\n            }\n            if (dx < min) {\n                min = dx;\n                closest = i;\n            }\n        }\n        closest = !radius || min <= radius ? snapTo[closest] : raw;\n        return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);\n    });\n}, random = function random(min, max, roundingIncrement, returnFunction) {\n    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function() {\n        return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + \"\").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;\n    });\n}, pipe = function pipe() {\n    for(var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++){\n        functions[_key] = arguments[_key];\n    }\n    return function(value) {\n        return functions.reduce(function(v, f) {\n            return f(v);\n        }, value);\n    };\n}, unitize = function unitize(func, unit) {\n    return function(value) {\n        return func(parseFloat(value)) + (unit || getUnit(value));\n    };\n}, normalize = function normalize(min, max, value) {\n    return mapRange(min, max, 0, 1, value);\n}, _wrapArray = function _wrapArray(a, wrapper, value) {\n    return _conditionalReturn(value, function(index) {\n        return a[~~wrapper(index)];\n    });\n}, wrap = function wrap(min, max, value) {\n    // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).\n    var range = max - min;\n    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function(value) {\n        return (range + (value - min) % range) % range + min;\n    });\n}, wrapYoyo = function wrapYoyo(min, max, value) {\n    var range = max - min, total = range * 2;\n    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function(value) {\n        value = (total + (value - min) % total) % total || 0;\n        return min + (value > range ? total - value : value);\n    });\n}, _replaceRandom = function _replaceRandom(value) {\n    //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])\n    var prev = 0, s = \"\", i, nums, end, isArray;\n    while(~(i = value.indexOf(\"random(\", prev))){\n        end = value.indexOf(\")\", i);\n        isArray = value.charAt(i + 7) === \"[\";\n        nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);\n        s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);\n        prev = end + 1;\n    }\n    return s + value.substr(prev, value.length - prev);\n}, mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\n    var inRange = inMax - inMin, outRange = outMax - outMin;\n    return _conditionalReturn(value, function(value) {\n        return outMin + ((value - inMin) / inRange * outRange || 0);\n    });\n}, interpolate = function interpolate(start, end, progress, mutate) {\n    var func = isNaN(start + end) ? 0 : function(p) {\n        return (1 - p) * start + p * end;\n    };\n    if (!func) {\n        var isString = _isString(start), master = {}, p, i, interpolators, l, il;\n        progress === true && (mutate = 1) && (progress = null);\n        if (isString) {\n            start = {\n                p: start\n            };\n            end = {\n                p: end\n            };\n        } else if (_isArray(start) && !_isArray(end)) {\n            interpolators = [];\n            l = start.length;\n            il = l - 2;\n            for(i = 1; i < l; i++){\n                interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.\n            }\n            l--;\n            func = function func(p) {\n                p *= l;\n                var i = Math.min(il, ~~p);\n                return interpolators[i](p - i);\n            };\n            progress = end;\n        } else if (!mutate) {\n            start = _merge(_isArray(start) ? [] : {}, start);\n        }\n        if (!interpolators) {\n            for(p in end){\n                _addPropTween.call(master, start, p, \"get\", end[p]);\n            }\n            func = function func(p) {\n                return _renderPropTweens(p, master) || (isString ? start.p : start);\n            };\n        }\n    }\n    return _conditionalReturn(progress, func);\n}, _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {\n    //used for nextLabel() and previousLabel()\n    var labels = timeline.labels, min = _bigNum, p, distance, label;\n    for(p in labels){\n        distance = labels[p] - fromTime;\n        if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {\n            label = p;\n            min = distance;\n        }\n    }\n    return label;\n}, _callback = function _callback(animation, type, executeLazyFirst) {\n    var v = animation.vars, callback = v[type], prevContext = _context, context = animation._ctx, params, scope, result;\n    if (!callback) {\n        return;\n    }\n    params = v[type + \"Params\"];\n    scope = v.callbackScope || animation;\n    executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n    context && (_context = context);\n    result = params ? callback.apply(scope, params) : callback.call(scope);\n    _context = prevContext;\n    return result;\n}, _interrupt = function _interrupt(animation) {\n    _removeFromParent(animation);\n    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);\n    animation.progress() < 1 && _callback(animation, \"onInterrupt\");\n    return animation;\n}, _quickTween, _registerPluginQueue = [], _createPlugin = function _createPlugin(config) {\n    if (_windowExists() && config) {\n        // edge case: some build tools may pass in a null/undefined value\n        config = !config.name && config[\"default\"] || config; //UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.\n        var name = config.name, isFunc = _isFunction(config), Plugin = name && !isFunc && config.init ? function() {\n            this._props = [];\n        } : config, //in case someone passes in an object that's not a plugin, like CustomEase\n        instanceDefaults = {\n            init: _emptyFunc,\n            render: _renderPropTweens,\n            add: _addPropTween,\n            kill: _killPropTweensOf,\n            modifier: _addPluginModifier,\n            rawVars: 0\n        }, statics = {\n            targetTest: 0,\n            get: 0,\n            getSetter: _getSetter,\n            aliases: {},\n            register: 0\n        };\n        _wake();\n        if (config !== Plugin) {\n            if (_plugins[name]) {\n                return;\n            }\n            _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods\n            _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods\n            _plugins[Plugin.prop = name] = Plugin;\n            if (config.targetTest) {\n                _harnessPlugins.push(Plugin);\n                _reservedProps[name] = 1;\n            }\n            name = (name === \"css\" ? \"CSS\" : name.charAt(0).toUpperCase() + name.substr(1)) + \"Plugin\"; //for the global name. \"motionPath\" should become MotionPathPlugin\n        }\n        _addGlobal(name, Plugin);\n        config.register && config.register(gsap, Plugin, PropTween);\n    } else {\n        config && _registerPluginQueue.push(config);\n    }\n}, /*\n * --------------------------------------------------------------------------------------\n * COLORS\n * --------------------------------------------------------------------------------------\n */ _255 = 255, _colorLookup = {\n    aqua: [\n        0,\n        _255,\n        _255\n    ],\n    lime: [\n        0,\n        _255,\n        0\n    ],\n    silver: [\n        192,\n        192,\n        192\n    ],\n    black: [\n        0,\n        0,\n        0\n    ],\n    maroon: [\n        128,\n        0,\n        0\n    ],\n    teal: [\n        0,\n        128,\n        128\n    ],\n    blue: [\n        0,\n        0,\n        _255\n    ],\n    navy: [\n        0,\n        0,\n        128\n    ],\n    white: [\n        _255,\n        _255,\n        _255\n    ],\n    olive: [\n        128,\n        128,\n        0\n    ],\n    yellow: [\n        _255,\n        _255,\n        0\n    ],\n    orange: [\n        _255,\n        165,\n        0\n    ],\n    gray: [\n        128,\n        128,\n        128\n    ],\n    purple: [\n        128,\n        0,\n        128\n    ],\n    green: [\n        0,\n        128,\n        0\n    ],\n    red: [\n        _255,\n        0,\n        0\n    ],\n    pink: [\n        _255,\n        192,\n        203\n    ],\n    cyan: [\n        0,\n        _255,\n        _255\n    ],\n    transparent: [\n        _255,\n        _255,\n        _255,\n        0\n    ]\n}, // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:\n// let ctx = _doc.createElement(\"canvas\").getContext(\"2d\");\n// _forEachName(\"aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan\", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});\n_hue = function _hue(h, m1, m2) {\n    h += h < 0 ? 1 : h > 1 ? -1 : 0;\n    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;\n}, splitColor = function splitColor(v, toHSL, forceAlpha) {\n    var a = !v ? _colorLookup.black : _isNumber(v) ? [\n        v >> 16,\n        v >> 8 & _255,\n        v & _255\n    ] : 0, r, g, b, h, s, l, max, min, d, wasHSL;\n    if (!a) {\n        if (v.substr(-1) === \",\") {\n            //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:\"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)\" - in this example \"blue,\" has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.\n            v = v.substr(0, v.length - 1);\n        }\n        if (_colorLookup[v]) {\n            a = _colorLookup[v];\n        } else if (v.charAt(0) === \"#\") {\n            if (v.length < 6) {\n                //for shorthand like #9F0 or #9F0F (could have alpha)\n                r = v.charAt(1);\n                g = v.charAt(2);\n                b = v.charAt(3);\n                v = \"#\" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : \"\");\n            }\n            if (v.length === 9) {\n                // hex with alpha, like #fd5e53ff\n                a = parseInt(v.substr(1, 6), 16);\n                return [\n                    a >> 16,\n                    a >> 8 & _255,\n                    a & _255,\n                    parseInt(v.substr(7), 16) / 255\n                ];\n            }\n            v = parseInt(v.substr(1), 16);\n            a = [\n                v >> 16,\n                v >> 8 & _255,\n                v & _255\n            ];\n        } else if (v.substr(0, 3) === \"hsl\") {\n            a = wasHSL = v.match(_strictNumExp);\n            if (!toHSL) {\n                h = +a[0] % 360 / 360;\n                s = +a[1] / 100;\n                l = +a[2] / 100;\n                g = l <= .5 ? l * (s + 1) : l + s - l * s;\n                r = l * 2 - g;\n                a.length > 3 && (a[3] *= 1); //cast as number\n                a[0] = _hue(h + 1 / 3, r, g);\n                a[1] = _hue(h, r, g);\n                a[2] = _hue(h - 1 / 3, r, g);\n            } else if (~v.indexOf(\"=\")) {\n                //if relative values are found, just return the raw strings with the relative prefixes in place.\n                a = v.match(_numExp);\n                forceAlpha && a.length < 4 && (a[3] = 1);\n                return a;\n            }\n        } else {\n            a = v.match(_strictNumExp) || _colorLookup.transparent;\n        }\n        a = a.map(Number);\n    }\n    if (toHSL && !wasHSL) {\n        r = a[0] / _255;\n        g = a[1] / _255;\n        b = a[2] / _255;\n        max = Math.max(r, g, b);\n        min = Math.min(r, g, b);\n        l = (max + min) / 2;\n        if (max === min) {\n            h = s = 0;\n        } else {\n            d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n            h *= 60;\n        }\n        a[0] = ~~(h + .5);\n        a[1] = ~~(s * 100 + .5);\n        a[2] = ~~(l * 100 + .5);\n    }\n    forceAlpha && a.length < 4 && (a[3] = 1);\n    return a;\n}, _colorOrderData = function _colorOrderData(v) {\n    // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a \"c\" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()\n    var values = [], c = [], i = -1;\n    v.split(_colorExp).forEach(function(v) {\n        var a = v.match(_numWithUnitExp) || [];\n        values.push.apply(values, a);\n        c.push(i += a.length + 1);\n    });\n    values.c = c;\n    return values;\n}, _formatColors = function _formatColors(s, toHSL, orderMatchData) {\n    var result = \"\", colors = (s + result).match(_colorExp), type = toHSL ? \"hsla(\" : \"rgba(\", i = 0, c, shell, d, l;\n    if (!colors) {\n        return s;\n    }\n    colors = colors.map(function(color) {\n        return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : color.join(\",\")) + \")\";\n    });\n    if (orderMatchData) {\n        d = _colorOrderData(s);\n        c = orderMatchData.c;\n        if (c.join(result) !== d.c.join(result)) {\n            shell = s.replace(_colorExp, \"1\").split(_numWithUnitExp);\n            l = shell.length - 1;\n            for(; i < l; i++){\n                result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + \"0,0,0,0)\" : (d.length ? d : colors.length ? colors : orderMatchData).shift());\n            }\n        }\n    }\n    if (!shell) {\n        shell = s.split(_colorExp);\n        l = shell.length - 1;\n        for(; i < l; i++){\n            result += shell[i] + colors[i];\n        }\n    }\n    return result + shell[l];\n}, _colorExp = function() {\n    var s = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3,4}){1,2}\\\\b\", //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,\n    p;\n    for(p in _colorLookup){\n        s += \"|\" + p + \"\\\\b\";\n    }\n    return new RegExp(s + \")\", \"gi\");\n}(), _hslExp = /hsl[a]?\\(/, _colorStringFilter = function _colorStringFilter(a) {\n    var combined = a.join(\" \"), toHSL;\n    _colorExp.lastIndex = 0;\n    if (_colorExp.test(combined)) {\n        toHSL = _hslExp.test(combined);\n        a[1] = _formatColors(a[1], toHSL);\n        a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.\n        return true;\n    }\n}, /*\n * --------------------------------------------------------------------------------------\n * TICKER\n * --------------------------------------------------------------------------------------\n */ _tickerActive, _ticker = function() {\n    var _getTime = Date.now, _lagThreshold = 500, _adjustedLag = 33, _startTime = _getTime(), _lastUpdate = _startTime, _gap = 1000 / 240, _nextTime = _gap, _listeners = [], _id, _req, _raf, _self, _delta, _i, _tick = function _tick(v) {\n        var elapsed = _getTime() - _lastUpdate, manual = v === true, overlap, dispatch, time, frame;\n        elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);\n        _lastUpdate += elapsed;\n        time = _lastUpdate - _startTime;\n        overlap = time - _nextTime;\n        if (overlap > 0 || manual) {\n            frame = ++_self.frame;\n            _delta = time - _self.time * 1000;\n            _self.time = time = time / 1000;\n            _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);\n            dispatch = 1;\n        }\n        manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the \"tick\" event so that timing is maintained. Otherwise, if processing the \"tick\" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.\n        if (dispatch) {\n            for(_i = 0; _i < _listeners.length; _i++){\n                // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.\n                _listeners[_i](time, _delta, frame, v);\n            }\n        }\n    };\n    _self = {\n        time: 0,\n        frame: 0,\n        tick: function tick() {\n            _tick(true);\n        },\n        deltaRatio: function deltaRatio(fps) {\n            return _delta / (1000 / (fps || 60));\n        },\n        wake: function wake() {\n            if (_coreReady) {\n                if (!_coreInitted && _windowExists()) {\n                    _win = _coreInitted = window;\n                    _doc = _win.document || {};\n                    _globals.gsap = gsap;\n                    (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);\n                    _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});\n                    _raf = _win.requestAnimationFrame;\n                    _registerPluginQueue.forEach(_createPlugin);\n                }\n                _id && _self.sleep();\n                _req = _raf || function(f) {\n                    return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);\n                };\n                _tickerActive = 1;\n                _tick(2);\n            }\n        },\n        sleep: function sleep() {\n            (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);\n            _tickerActive = 0;\n            _req = _emptyFunc;\n        },\n        lagSmoothing: function lagSmoothing(threshold, adjustedLag) {\n            _lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited\n            _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);\n        },\n        fps: function fps(_fps) {\n            _gap = 1000 / (_fps || 240);\n            _nextTime = _self.time * 1000 + _gap;\n        },\n        add: function add(callback, once, prioritize) {\n            var func = once ? function(t, d, f, v) {\n                callback(t, d, f, v);\n                _self.remove(func);\n            } : callback;\n            _self.remove(callback);\n            _listeners[prioritize ? \"unshift\" : \"push\"](func);\n            _wake();\n            return func;\n        },\n        remove: function remove(callback, i) {\n            ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;\n        },\n        _listeners: _listeners\n    };\n    return _self;\n}(), _wake = function _wake() {\n    return !_tickerActive && _ticker.wake();\n}, //also ensures the core classes are initialized.\n/*\n* -------------------------------------------------\n* EASING\n* -------------------------------------------------\n*/ _easeMap = {}, _customEaseExp = /^[\\d.\\-M][\\d.\\-,\\s]/, _quotesExp = /[\"']/g, _parseObjectInString = function _parseObjectInString(value) {\n    //takes a string like \"{wiggles:10, type:anticipate})\" and turns it into a real object. Notice it ends in \")\" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.\n    var obj = {}, split = value.substr(1, value.length - 3).split(\":\"), key = split[0], i = 1, l = split.length, index, val, parsedVal;\n    for(; i < l; i++){\n        val = split[i];\n        index = i !== l - 1 ? val.lastIndexOf(\",\") : val.length;\n        parsedVal = val.substr(0, index);\n        obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, \"\").trim() : +parsedVal;\n        key = val.substr(index + 1).trim();\n    }\n    return obj;\n}, _valueInParentheses = function _valueInParentheses(value) {\n    var open = value.indexOf(\"(\") + 1, close = value.indexOf(\")\"), nested = value.indexOf(\"(\", open);\n    return value.substring(open, ~nested && nested < close ? value.indexOf(\")\", close + 1) : close);\n}, _configEaseFromString = function _configEaseFromString(name) {\n    //name can be a string like \"elastic.out(1,0.5)\", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).\n    var split = (name + \"\").split(\"(\"), ease = _easeMap[split[0]];\n    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf(\"{\") ? [\n        _parseObjectInString(split[1])\n    ] : _valueInParentheses(name).split(\",\").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE(\"\", name) : ease;\n}, _invertEase = function _invertEase(ease) {\n    return function(p) {\n        return 1 - ease(1 - p);\n    };\n}, // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.\n_propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {\n    var child = timeline._first, ease;\n    while(child){\n        if (child instanceof Timeline) {\n            _propagateYoyoEase(child, isYoyo);\n        } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {\n            if (child.timeline) {\n                _propagateYoyoEase(child.timeline, isYoyo);\n            } else {\n                ease = child._ease;\n                child._ease = child._yEase;\n                child._yEase = ease;\n                child._yoyo = isYoyo;\n            }\n        }\n        child = child._next;\n    }\n}, _parseEase = function _parseEase(ease, defaultEase) {\n    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;\n}, _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {\n    if (easeOut === void 0) {\n        easeOut = function easeOut(p) {\n            return 1 - easeIn(1 - p);\n        };\n    }\n    if (easeInOut === void 0) {\n        easeInOut = function easeInOut(p) {\n            return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;\n        };\n    }\n    var ease = {\n        easeIn: easeIn,\n        easeOut: easeOut,\n        easeInOut: easeInOut\n    }, lowercaseName;\n    _forEachName(names, function(name) {\n        _easeMap[name] = _globals[name] = ease;\n        _easeMap[lowercaseName = name.toLowerCase()] = easeOut;\n        for(var p in ease){\n            _easeMap[lowercaseName + (p === \"easeIn\" ? \".in\" : p === \"easeOut\" ? \".out\" : \".inOut\")] = _easeMap[name + \".\" + p] = ease[p];\n        }\n    });\n    return ease;\n}, _easeInOutFromOut = function _easeInOutFromOut(easeOut) {\n    return function(p) {\n        return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;\n    };\n}, _configElastic = function _configElastic(type, amplitude, period) {\n    var p1 = amplitude >= 1 ? amplitude : 1, //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.\n    p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1), p3 = p2 / _2PI * (Math.asin(1 / p1) || 0), easeOut = function easeOut(p) {\n        return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;\n    }, ease = type === \"out\" ? easeOut : type === \"in\" ? function(p) {\n        return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n    p2 = _2PI / p2; //precalculate to optimize\n    ease.config = function(amplitude, period) {\n        return _configElastic(type, amplitude, period);\n    };\n    return ease;\n}, _configBack = function _configBack(type, overshoot) {\n    if (overshoot === void 0) {\n        overshoot = 1.70158;\n    }\n    var easeOut = function easeOut(p) {\n        return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;\n    }, ease = type === \"out\" ? easeOut : type === \"in\" ? function(p) {\n        return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n    ease.config = function(overshoot) {\n        return _configBack(type, overshoot);\n    };\n    return ease;\n}; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.\n// _weightedEase = ratio => {\n// \tlet y = 0.5 + ratio / 2;\n// \treturn p => (2 * (1 - p) * p * y + p * p);\n// },\n// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.\n// _weightedEaseStrong = ratio => {\n// \tratio = .5 + ratio / 2;\n// \tlet o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),\n// \t\tb = ratio - o,\n// \t\tc = ratio + o;\n// \treturn p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;\n// };\n_forEachName(\"Linear,Quad,Cubic,Quart,Quint,Strong\", function(name, i) {\n    var power = i < 5 ? i + 1 : i;\n    _insertEase(name + \",Power\" + (power - 1), i ? function(p) {\n        return Math.pow(p, power);\n    } : function(p) {\n        return p;\n    }, function(p) {\n        return 1 - Math.pow(1 - p, power);\n    }, function(p) {\n        return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;\n    });\n});\n_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;\n_insertEase(\"Elastic\", _configElastic(\"in\"), _configElastic(\"out\"), _configElastic());\n(function(n, c) {\n    var n1 = 1 / c, n2 = 2 * n1, n3 = 2.5 * n1, easeOut = function easeOut(p) {\n        return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;\n    };\n    _insertEase(\"Bounce\", function(p) {\n        return 1 - easeOut(1 - p);\n    }, easeOut);\n})(7.5625, 2.75);\n_insertEase(\"Expo\", function(p) {\n    return p ? Math.pow(2, 10 * (p - 1)) : 0;\n});\n_insertEase(\"Circ\", function(p) {\n    return -(_sqrt(1 - p * p) - 1);\n});\n_insertEase(\"Sine\", function(p) {\n    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;\n});\n_insertEase(\"Back\", _configBack(\"in\"), _configBack(\"out\"), _configBack());\n_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {\n    config: function config(steps, immediateStart) {\n        if (steps === void 0) {\n            steps = 1;\n        }\n        var p1 = 1 / steps, p2 = steps + (immediateStart ? 0 : 1), p3 = immediateStart ? 1 : 0, max = 1 - _tinyNum;\n        return function(p) {\n            return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;\n        };\n    }\n};\n_defaults.ease = _easeMap[\"quad.out\"];\n_forEachName(\"onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt\", function(name) {\n    return _callbackNames += name + \",\" + name + \"Params,\";\n});\n/*\n * --------------------------------------------------------------------------------------\n * CACHE\n * --------------------------------------------------------------------------------------\n */ var GSCache = function GSCache(target, harness) {\n    this.id = _gsID++;\n    target._gsap = this;\n    this.target = target;\n    this.harness = harness;\n    this.get = harness ? harness.get : _getProperty;\n    this.set = harness ? harness.getSetter : _getSetter;\n};\n/*\n * --------------------------------------------------------------------------------------\n * ANIMATION\n * --------------------------------------------------------------------------------------\n */ var Animation = /*#__PURE__*/ function() {\n    function Animation(vars) {\n        this.vars = vars;\n        this._delay = +vars.delay || 0;\n        if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {\n            // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.\n            this._rDelay = vars.repeatDelay || 0;\n            this._yoyo = !!vars.yoyo || !!vars.yoyoEase;\n        }\n        this._ts = 1;\n        _setDuration(this, +vars.duration, 1, 1);\n        this.data = vars.data;\n        if (_context) {\n            this._ctx = _context;\n            _context.data.push(this);\n        }\n        _tickerActive || _ticker.wake();\n    }\n    var _proto = Animation.prototype;\n    _proto.delay = function delay(value) {\n        if (value || value === 0) {\n            this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);\n            this._delay = value;\n            return this;\n        }\n        return this._delay;\n    };\n    _proto.duration = function duration(value) {\n        return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;\n    };\n    _proto.totalDuration = function totalDuration(value) {\n        if (!arguments.length) {\n            return this._tDur;\n        }\n        this._dirty = 0;\n        return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));\n    };\n    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {\n        _wake();\n        if (!arguments.length) {\n            return this._tTime;\n        }\n        var parent = this._dp;\n        if (parent && parent.smoothChildTiming && this._ts) {\n            _alignPlayhead(this, _totalTime);\n            !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.\n            //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.\n            while(parent && parent.parent){\n                if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {\n                    parent.totalTime(parent._tTime, true);\n                }\n                parent = parent.parent;\n            }\n            if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {\n                //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.\n                _addToTimeline(this._dp, this, this._start - this._delay);\n            }\n        }\n        if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {\n            // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)\n            this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause\n            //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)\n            //   this._lock = 1;\n            _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;\n        //}\n        }\n        return this;\n    };\n    _proto.time = function time(value, suppressEvents) {\n        return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!\n    };\n    _proto.totalProgress = function totalProgress(value, suppressEvents) {\n        return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;\n    };\n    _proto.progress = function progress(value, suppressEvents) {\n        return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;\n    };\n    _proto.iteration = function iteration(value, suppressEvents) {\n        var cycleDuration = this.duration() + this._rDelay;\n        return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;\n    } // potential future addition:\n    ;\n    _proto.timeScale = function timeScale(value) {\n        if (!arguments.length) {\n            return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.\n        }\n        if (this._rts === value) {\n            return this;\n        }\n        var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.\n        // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.\n        //(+value < 0 && this._rts >= 0) && _callback(this, \"onReverse\", true);\n        // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.\n        this._rts = +value || 0;\n        this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.\n        this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), true);\n        _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.\n        return _recacheAncestors(this);\n    };\n    _proto.paused = function paused(value) {\n        if (!arguments.length) {\n            return this._ps;\n        }\n        if (this._ps !== value) {\n            this._ps = value;\n            if (value) {\n                this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.\n                this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the \"real\" timeScale as _rts (recorded time scale)\n            } else {\n                _wake();\n                this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.\n                this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.\n            }\n        }\n        return this;\n    };\n    _proto.startTime = function startTime(value) {\n        if (arguments.length) {\n            this._start = value;\n            var parent = this.parent || this._dp;\n            parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);\n            return this;\n        }\n        return this._start;\n    };\n    _proto.endTime = function endTime(includeRepeats) {\n        return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);\n    };\n    _proto.rawTime = function rawTime(wrapRepeats) {\n        var parent = this.parent || this._dp; // _dp = detached parent\n        return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);\n    };\n    _proto.revert = function revert(config) {\n        if (config === void 0) {\n            config = _revertConfig;\n        }\n        var prevIsReverting = _reverting;\n        _reverting = config;\n        if (this._initted || this._startAt) {\n            this.timeline && this.timeline.revert(config);\n            this.totalTime(-0.01, config.suppressEvents);\n        }\n        this.data !== \"nested\" && config.kill !== false && this.kill();\n        _reverting = prevIsReverting;\n        return this;\n    };\n    _proto.globalTime = function globalTime(rawTime) {\n        var animation = this, time = arguments.length ? rawTime : animation.rawTime();\n        while(animation){\n            time = animation._start + time / (animation._ts || 1);\n            animation = animation._dp;\n        }\n        return !this.parent && this._sat ? this._sat.vars.immediateRender ? -Infinity : this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). \"_sat\" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().\n    };\n    _proto.repeat = function repeat(value) {\n        if (arguments.length) {\n            this._repeat = value === Infinity ? -2 : value;\n            return _onUpdateTotalDuration(this);\n        }\n        return this._repeat === -2 ? Infinity : this._repeat;\n    };\n    _proto.repeatDelay = function repeatDelay(value) {\n        if (arguments.length) {\n            var time = this._time;\n            this._rDelay = value;\n            _onUpdateTotalDuration(this);\n            return time ? this.time(time) : this;\n        }\n        return this._rDelay;\n    };\n    _proto.yoyo = function yoyo(value) {\n        if (arguments.length) {\n            this._yoyo = value;\n            return this;\n        }\n        return this._yoyo;\n    };\n    _proto.seek = function seek(position, suppressEvents) {\n        return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));\n    };\n    _proto.restart = function restart(includeDelay, suppressEvents) {\n        return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));\n    };\n    _proto.play = function play(from, suppressEvents) {\n        from != null && this.seek(from, suppressEvents);\n        return this.reversed(false).paused(false);\n    };\n    _proto.reverse = function reverse(from, suppressEvents) {\n        from != null && this.seek(from || this.totalDuration(), suppressEvents);\n        return this.reversed(true).paused(false);\n    };\n    _proto.pause = function pause(atTime, suppressEvents) {\n        atTime != null && this.seek(atTime, suppressEvents);\n        return this.paused(true);\n    };\n    _proto.resume = function resume() {\n        return this.paused(false);\n    };\n    _proto.reversed = function reversed(value) {\n        if (arguments.length) {\n            !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.\n            return this;\n        }\n        return this._rts < 0;\n    };\n    _proto.invalidate = function invalidate() {\n        this._initted = this._act = 0;\n        this._zTime = -_tinyNum;\n        return this;\n    };\n    _proto.isActive = function isActive() {\n        var parent = this.parent || this._dp, start = this._start, rawTime;\n        return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);\n    };\n    _proto.eventCallback = function eventCallback(type, callback, params) {\n        var vars = this.vars;\n        if (arguments.length > 1) {\n            if (!callback) {\n                delete vars[type];\n            } else {\n                vars[type] = callback;\n                params && (vars[type + \"Params\"] = params);\n                type === \"onUpdate\" && (this._onUpdate = callback);\n            }\n            return this;\n        }\n        return vars[type];\n    };\n    _proto.then = function then(onFulfilled) {\n        var self = this;\n        return new Promise(function(resolve) {\n            var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough, _resolve = function _resolve() {\n                var _then = self.then;\n                self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)\n                _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);\n                resolve(f);\n                self.then = _then;\n            };\n            if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {\n                _resolve();\n            } else {\n                self._prom = _resolve;\n            }\n        });\n    };\n    _proto.kill = function kill() {\n        _interrupt(this);\n    };\n    return Animation;\n}();\n_setDefaults(Animation.prototype, {\n    _time: 0,\n    _start: 0,\n    _end: 0,\n    _tTime: 0,\n    _tDur: 0,\n    _dirty: 0,\n    _repeat: 0,\n    _yoyo: false,\n    parent: null,\n    _initted: false,\n    _rDelay: 0,\n    _ts: 1,\n    _dp: 0,\n    ratio: 0,\n    _zTime: -_tinyNum,\n    _prom: 0,\n    _ps: false,\n    _rts: 1\n});\n/*\n * -------------------------------------------------\n * TIMELINE\n * -------------------------------------------------\n */ var Timeline = /*#__PURE__*/ function(_Animation) {\n    _inheritsLoose(Timeline, _Animation);\n    function Timeline(vars, position) {\n        var _this;\n        if (vars === void 0) {\n            vars = {};\n        }\n        _this = _Animation.call(this, vars) || this;\n        _this.labels = {};\n        _this.smoothChildTiming = !!vars.smoothChildTiming;\n        _this.autoRemoveChildren = !!vars.autoRemoveChildren;\n        _this._sort = _isNotFalse(vars.sortChildren);\n        _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);\n        vars.reversed && _this.reverse();\n        vars.paused && _this.paused(true);\n        vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);\n        return _this;\n    }\n    var _proto2 = Timeline.prototype;\n    _proto2.to = function to(targets, vars, position) {\n        _createTweenType(0, arguments, this);\n        return this;\n    };\n    _proto2.from = function from(targets, vars, position) {\n        _createTweenType(1, arguments, this);\n        return this;\n    };\n    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {\n        _createTweenType(2, arguments, this);\n        return this;\n    };\n    _proto2.set = function set(targets, vars, position) {\n        vars.duration = 0;\n        vars.parent = this;\n        _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);\n        vars.immediateRender = !!vars.immediateRender;\n        new Tween(targets, vars, _parsePosition(this, position), 1);\n        return this;\n    };\n    _proto2.call = function call(callback, params, position) {\n        return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);\n    } //ONLY for backward compatibility! Maybe delete?\n    ;\n    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n        vars.duration = duration;\n        vars.stagger = vars.stagger || stagger;\n        vars.onComplete = onCompleteAll;\n        vars.onCompleteParams = onCompleteAllParams;\n        vars.parent = this;\n        new Tween(targets, vars, _parsePosition(this, position));\n        return this;\n    };\n    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n        vars.runBackwards = 1;\n        _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);\n        return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {\n        toVars.startAt = fromVars;\n        _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);\n        return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n    _proto2.render = function render(totalTime, suppressEvents, force) {\n        var prevTime = this._time, tDur = this._dirty ? this.totalDuration() : this._tDur, dur = this._dur, tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime), // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.\n        crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur), time, child, next, iteration, cycleDuration, prevPaused, pauseTween, timeScale, prevStart, prevIteration, yoyo, isYoyo;\n        this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);\n        if (tTime !== this._tTime || force || crossingStart) {\n            if (prevTime !== this._time && dur) {\n                //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).\n                tTime += this._time - prevTime;\n                totalTime += this._time - prevTime;\n            }\n            time = tTime;\n            prevStart = this._start;\n            timeScale = this._ts;\n            prevPaused = !timeScale;\n            if (crossingStart) {\n                dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.\n                (totalTime || !suppressEvents) && (this._zTime = totalTime);\n            }\n            if (this._repeat) {\n                //adjust the time for repeats and yoyos\n                yoyo = this._yoyo;\n                cycleDuration = dur + this._rDelay;\n                if (this._repeat < -1 && totalTime < 0) {\n                    return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n                }\n                time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)\n                if (tTime === tDur) {\n                    // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)\n                    iteration = this._repeat;\n                    time = dur;\n                } else {\n                    iteration = ~~(tTime / cycleDuration);\n                    if (iteration && iteration === tTime / cycleDuration) {\n                        time = dur;\n                        iteration--;\n                    }\n                    time > dur && (time = dur);\n                }\n                prevIteration = _animationCycle(this._tTime, cycleDuration);\n                !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://greensock.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the \"repeatDelay\" portion\n                if (yoyo && iteration & 1) {\n                    time = dur - time;\n                    isYoyo = 1;\n                }\n                /*\n        make sure children at the end/beginning of the timeline are rendered properly. If, for example,\n        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which\n        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there\n        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So\n        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must\n        ensure that zero-duration tweens at the very beginning or end of the Timeline work.\n        */ if (iteration !== prevIteration && !this._lock) {\n                    var rewinding = yoyo && prevIteration & 1, doesWrap = rewinding === (yoyo && iteration & 1);\n                    iteration < prevIteration && (rewinding = !rewinding);\n                    prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.\n                    this._lock = 1;\n                    this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;\n                    this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.\n                    !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n                    this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);\n                    if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {\n                        // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.\n                        return this;\n                    }\n                    dur = this._dur; // in case the duration changed in the onRepeat\n                    tDur = this._tDur;\n                    if (doesWrap) {\n                        this._lock = 2;\n                        prevTime = rewinding ? dur : -0.0001;\n                        this.render(prevTime, true);\n                        this.vars.repeatRefresh && !isYoyo && this.invalidate();\n                    }\n                    this._lock = 0;\n                    if (!this._ts && !prevPaused) {\n                        return this;\n                    } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.\n                    _propagateYoyoEase(this, isYoyo);\n                }\n            }\n            if (this._hasPause && !this._forcing && this._lock < 2) {\n                pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));\n                if (pauseTween) {\n                    tTime -= time - (time = pauseTween._start);\n                }\n            }\n            this._tTime = tTime;\n            this._time = time;\n            this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.\n            if (!this._initted) {\n                this._onUpdate = this.vars.onUpdate;\n                this._initted = 1;\n                this._zTime = totalTime;\n                prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).\n            }\n            if (!prevTime && time && !suppressEvents && !iteration) {\n                _callback(this, \"onStart\");\n                if (this._tTime !== tTime) {\n                    // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.\n                    return this;\n                }\n            }\n            if (time >= prevTime && totalTime >= 0) {\n                child = this._first;\n                while(child){\n                    next = child._next;\n                    if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {\n                        if (child.parent !== this) {\n                            // an extreme edge case - the child's render could do something like kill() the \"next\" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.\n                            return this.render(totalTime, suppressEvents, force);\n                        }\n                        child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);\n                        if (time !== this._time || !this._ts && !prevPaused) {\n                            //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n                            pauseTween = 0;\n                            next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)\n                            break;\n                        }\n                    }\n                    child = next;\n                }\n            } else {\n                child = this._last;\n                var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.\n                while(child){\n                    next = child._prev;\n                    if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {\n                        if (child.parent !== this) {\n                            // an extreme edge case - the child's render could do something like kill() the \"next\" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.\n                            return this.render(totalTime, suppressEvents, force);\n                        }\n                        child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt)); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.\n                        if (time !== this._time || !this._ts && !prevPaused) {\n                            //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n                            pauseTween = 0;\n                            next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)\n                            break;\n                        }\n                    }\n                    child = next;\n                }\n            }\n            if (pauseTween && !suppressEvents) {\n                this.pause();\n                pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;\n                if (this._ts) {\n                    //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).\n                    this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.\n                    _setEnd(this);\n                    return this.render(totalTime, suppressEvents, force);\n                }\n            }\n            this._onUpdate && !suppressEvents && _callback(this, \"onUpdate\", true);\n            if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) {\n                if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) {\n                    if (!this._lock) {\n                        // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.\n                        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.\n                        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {\n                            _callback(this, tTime === tDur && totalTime >= 0 ? \"onComplete\" : \"onReverseComplete\", true);\n                            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n                        }\n                    }\n                }\n            }\n        }\n        return this;\n    };\n    _proto2.add = function add(child, position) {\n        var _this2 = this;\n        _isNumber(position) || (position = _parsePosition(this, position, child));\n        if (!(child instanceof Animation)) {\n            if (_isArray(child)) {\n                child.forEach(function(obj) {\n                    return _this2.add(obj, position);\n                });\n                return this;\n            }\n            if (_isString(child)) {\n                return this.addLabel(child, position);\n            }\n            if (_isFunction(child)) {\n                child = Tween.delayedCall(0, child);\n            } else {\n                return this;\n            }\n        }\n        return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!\n    };\n    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {\n        if (nested === void 0) {\n            nested = true;\n        }\n        if (tweens === void 0) {\n            tweens = true;\n        }\n        if (timelines === void 0) {\n            timelines = true;\n        }\n        if (ignoreBeforeTime === void 0) {\n            ignoreBeforeTime = -_bigNum;\n        }\n        var a = [], child = this._first;\n        while(child){\n            if (child._start >= ignoreBeforeTime) {\n                if (child instanceof Tween) {\n                    tweens && a.push(child);\n                } else {\n                    timelines && a.push(child);\n                    nested && a.push.apply(a, child.getChildren(true, tweens, timelines));\n                }\n            }\n            child = child._next;\n        }\n        return a;\n    };\n    _proto2.getById = function getById(id) {\n        var animations = this.getChildren(1, 1, 1), i = animations.length;\n        while(i--){\n            if (animations[i].vars.id === id) {\n                return animations[i];\n            }\n        }\n    };\n    _proto2.remove = function remove(child) {\n        if (_isString(child)) {\n            return this.removeLabel(child);\n        }\n        if (_isFunction(child)) {\n            return this.killTweensOf(child);\n        }\n        _removeLinkedListItem(this, child);\n        if (child === this._recent) {\n            this._recent = this._last;\n        }\n        return _uncache(this);\n    };\n    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {\n        if (!arguments.length) {\n            return this._tTime;\n        }\n        this._forcing = 1;\n        if (!this._dp && this._ts) {\n            //special case for the global timeline (or any other that has no parent or detached parent).\n            this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));\n        }\n        _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);\n        this._forcing = 0;\n        return this;\n    };\n    _proto2.addLabel = function addLabel(label, position) {\n        this.labels[label] = _parsePosition(this, position);\n        return this;\n    };\n    _proto2.removeLabel = function removeLabel(label) {\n        delete this.labels[label];\n        return this;\n    };\n    _proto2.addPause = function addPause(position, callback, params) {\n        var t = Tween.delayedCall(0, callback || _emptyFunc, params);\n        t.data = \"isPause\";\n        this._hasPause = 1;\n        return _addToTimeline(this, t, _parsePosition(this, position));\n    };\n    _proto2.removePause = function removePause(position) {\n        var child = this._first;\n        position = _parsePosition(this, position);\n        while(child){\n            if (child._start === position && child.data === \"isPause\") {\n                _removeFromParent(child);\n            }\n            child = child._next;\n        }\n    };\n    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n        var tweens = this.getTweensOf(targets, onlyActive), i = tweens.length;\n        while(i--){\n            _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);\n        }\n        return this;\n    };\n    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {\n        var a = [], parsedTargets = toArray(targets), child = this._first, isGlobalTime = _isNumber(onlyActive), // a number is interpreted as a global time. If the animation spans\n        children;\n        while(child){\n            if (child instanceof Tween) {\n                if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {\n                    // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.\n                    a.push(child);\n                }\n            } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {\n                a.push.apply(a, children);\n            }\n            child = child._next;\n        }\n        return a;\n    } // potential future feature - targets() on timelines\n    ;\n    _proto2.tweenTo = function tweenTo(position, vars) {\n        vars = vars || {};\n        var tl = this, endTime = _parsePosition(tl, position), _vars = vars, startAt = _vars.startAt, _onStart = _vars.onStart, onStartParams = _vars.onStartParams, immediateRender = _vars.immediateRender, initted, tween = Tween.to(tl, _setDefaults({\n            ease: vars.ease || \"none\",\n            lazy: false,\n            immediateRender: false,\n            time: endTime,\n            overwrite: \"auto\",\n            duration: vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,\n            onStart: function onStart() {\n                tl.pause();\n                if (!initted) {\n                    var duration = vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale());\n                    tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);\n                    initted = 1;\n                }\n                _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.\n            }\n        }, vars));\n        return immediateRender ? tween.render(0) : tween;\n    };\n    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {\n        return this.tweenTo(toPosition, _setDefaults({\n            startAt: {\n                time: _parsePosition(this, fromPosition)\n            }\n        }, vars));\n    };\n    _proto2.recent = function recent() {\n        return this._recent;\n    };\n    _proto2.nextLabel = function nextLabel(afterTime) {\n        if (afterTime === void 0) {\n            afterTime = this._time;\n        }\n        return _getLabelInDirection(this, _parsePosition(this, afterTime));\n    };\n    _proto2.previousLabel = function previousLabel(beforeTime) {\n        if (beforeTime === void 0) {\n            beforeTime = this._time;\n        }\n        return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);\n    };\n    _proto2.currentLabel = function currentLabel(value) {\n        return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);\n    };\n    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {\n        if (ignoreBeforeTime === void 0) {\n            ignoreBeforeTime = 0;\n        }\n        var child = this._first, labels = this.labels, p;\n        while(child){\n            if (child._start >= ignoreBeforeTime) {\n                child._start += amount;\n                child._end += amount;\n            }\n            child = child._next;\n        }\n        if (adjustLabels) {\n            for(p in labels){\n                if (labels[p] >= ignoreBeforeTime) {\n                    labels[p] += amount;\n                }\n            }\n        }\n        return _uncache(this);\n    };\n    _proto2.invalidate = function invalidate(soft) {\n        var child = this._first;\n        this._lock = 0;\n        while(child){\n            child.invalidate(soft);\n            child = child._next;\n        }\n        return _Animation.prototype.invalidate.call(this, soft);\n    };\n    _proto2.clear = function clear(includeLabels) {\n        if (includeLabels === void 0) {\n            includeLabels = true;\n        }\n        var child = this._first, next;\n        while(child){\n            next = child._next;\n            this.remove(child);\n            child = next;\n        }\n        this._dp && (this._time = this._tTime = this._pTime = 0);\n        includeLabels && (this.labels = {});\n        return _uncache(this);\n    };\n    _proto2.totalDuration = function totalDuration(value) {\n        var max = 0, self = this, child = self._last, prevStart = _bigNum, prev, start, parent;\n        if (arguments.length) {\n            return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));\n        }\n        if (self._dirty) {\n            parent = self.parent;\n            while(child){\n                prev = child._prev; //record it here in case the tween changes position in the sequence...\n                child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.\n                start = child._start;\n                if (start > prevStart && self._sort && child._ts && !self._lock) {\n                    //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence\n                    self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().\n                    _addToTimeline(self, child, start - child._delay, 1)._lock = 0;\n                } else {\n                    prevStart = start;\n                }\n                if (start < 0 && child._ts) {\n                    //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.\n                    max -= start;\n                    if (!parent && !self._dp || parent && parent.smoothChildTiming) {\n                        self._start += start / self._ts;\n                        self._time -= start;\n                        self._tTime -= start;\n                    }\n                    self.shiftChildren(-start, false, -Infinity);\n                    prevStart = 0;\n                }\n                child._end > max && child._ts && (max = child._end);\n                child = prev;\n            }\n            _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);\n            self._dirty = 0;\n        }\n        return self._tDur;\n    };\n    Timeline.updateRoot = function updateRoot(time) {\n        if (_globalTimeline._ts) {\n            _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));\n            _lastRenderedFrame = _ticker.frame;\n        }\n        if (_ticker.frame >= _nextGCFrame) {\n            _nextGCFrame += _config.autoSleep || 120;\n            var child = _globalTimeline._first;\n            if (!child || !child._ts) {\n                if (_config.autoSleep && _ticker._listeners.length < 2) {\n                    while(child && !child._ts){\n                        child = child._next;\n                    }\n                    child || _ticker.sleep();\n                }\n            }\n        }\n    };\n    return Timeline;\n}(Animation);\n_setDefaults(Timeline.prototype, {\n    _lock: 0,\n    _hasPause: 0,\n    _forcing: 0\n});\nvar _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {\n    //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter), index = 0, matchIndex = 0, result, startNums, color, endNum, chunk, startNum, hasRandom, a;\n    pt.b = start;\n    pt.e = end;\n    start += \"\"; //ensure values are strings\n    end += \"\";\n    if (hasRandom = ~end.indexOf(\"random(\")) {\n        end = _replaceRandom(end);\n    }\n    if (stringFilter) {\n        a = [\n            start,\n            end\n        ];\n        stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.\n        start = a[0];\n        end = a[1];\n    }\n    startNums = start.match(_complexStringNumExp) || [];\n    while(result = _complexStringNumExp.exec(end)){\n        endNum = result[0];\n        chunk = end.substring(index, result.index);\n        if (color) {\n            color = (color + 1) % 5;\n        } else if (chunk.substr(-5) === \"rgba(\") {\n            color = 1;\n        }\n        if (endNum !== startNums[matchIndex++]) {\n            startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.\n            pt._pt = {\n                _next: pt._pt,\n                p: chunk || matchIndex === 1 ? chunk : \",\",\n                //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n                s: startNum,\n                c: endNum.charAt(1) === \"=\" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,\n                m: color && color < 4 ? Math.round : 0\n            };\n            index = _complexStringNumExp.lastIndex;\n        }\n    }\n    pt.c = index < end.length ? end.substring(index, end.length) : \"\"; //we use the \"c\" of the PropTween to store the final part of the string (after the last number)\n    pt.fp = funcParam;\n    if (_relExp.test(end) || hasRandom) {\n        pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n    }\n    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n    return pt;\n}, _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {\n    _isFunction(end) && (end = end(index || 0, target, targets));\n    var currentValue = target[prop], parsedStart = start !== \"get\" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf(\"set\") || !_isFunction(target[\"get\" + prop.substr(3)]) ? prop : \"get\" + prop.substr(3)](funcParam) : target[prop](), setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc, pt;\n    if (_isString(end)) {\n        if (~end.indexOf(\"random(\")) {\n            end = _replaceRandom(end);\n        }\n        if (end.charAt(1) === \"=\") {\n            pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);\n            if (pt || pt === 0) {\n                // to avoid isNaN, like if someone passes in a value like \"!= whatever\"\n                end = pt;\n            }\n        }\n    }\n    if (!optional || parsedStart !== end || _forceAllPropTweens) {\n        if (!isNaN(parsedStart * end) && end !== \"\") {\n            // fun fact: any number multiplied by \"\" is evaluated as the number 0!\n            pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === \"boolean\" ? _renderBoolean : _renderPlain, 0, setter);\n            funcParam && (pt.fp = funcParam);\n            modifier && pt.modifier(modifier, this, target);\n            return this._pt = pt;\n        }\n        !currentValue && !(prop in target) && _missingPlugin(prop, end);\n        return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);\n    }\n}, //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with \"random()\" in them. It does NOT process relative values.\n_processVars = function _processVars(vars, index, target, targets, tween) {\n    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));\n    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {\n        return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;\n    }\n    var copy = {}, p;\n    for(p in vars){\n        copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);\n    }\n    return copy;\n}, _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {\n    var plugin, pt, ptLookup, i;\n    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {\n        tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);\n        if (tween !== _quickTween) {\n            ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.\n            i = plugin._props.length;\n            while(i--){\n                ptLookup[plugin._props[i]] = pt;\n            }\n        }\n    }\n    return plugin;\n}, _overwritingTween, //store a reference temporarily so we can avoid overwriting itself.\n_forceAllPropTweens, _initTween = function _initTween(tween, time, tTime) {\n    var vars = tween.vars, ease = vars.ease, startAt = vars.startAt, immediateRender = vars.immediateRender, lazy = vars.lazy, onUpdate = vars.onUpdate, onUpdateParams = vars.onUpdateParams, callbackScope = vars.callbackScope, runBackwards = vars.runBackwards, yoyoEase = vars.yoyoEase, keyframes = vars.keyframes, autoRevert = vars.autoRevert, dur = tween._dur, prevStartAt = tween._startAt, targets = tween._targets, parent = tween.parent, fullTargets = parent && parent.data === \"nested\" ? parent.vars.targets : targets, autoOverwrite = tween._overwrite === \"auto\" && !_suppressOverwrites, tl = tween.timeline, cleanVars, i, p, pt, target, hasPriority, gsData, harness, plugin, ptLookup, index, harnessVars, overwritten;\n    tl && (!keyframes || !ease) && (ease = \"none\");\n    tween._ease = _parseEase(ease, _defaults.ease);\n    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;\n    if (yoyoEase && tween._yoyo && !tween._repeat) {\n        //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.\n        yoyoEase = tween._yEase;\n        tween._yEase = tween._ease;\n        tween._ease = yoyoEase;\n    }\n    tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.\n    if (!tl || keyframes && !vars.stagger) {\n        //if there's an internal timeline, skip all the parsing because we passed that task down the chain.\n        harness = targets[0] ? _getCache(targets[0]).harness : 0;\n        harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an \"x\" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.\n        cleanVars = _copyExcluding(vars, _reservedProps);\n        if (prevStartAt) {\n            prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.\n            time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a \"startAt\" (not \"from()\" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)\n            // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for \"startAt\" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.\n            prevStartAt._lazy = 0;\n        }\n        if (startAt) {\n            _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({\n                data: \"isStart\",\n                overwrite: false,\n                parent: parent,\n                immediateRender: true,\n                lazy: !prevStartAt && _isNotFalse(lazy),\n                startAt: null,\n                delay: 0,\n                onUpdate: onUpdate,\n                onUpdateParams: onUpdateParams,\n                callbackScope: callbackScope,\n                stagger: 0\n            }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);\n            tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.\n            tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween\n            time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.\n            if (immediateRender) {\n                if (dur && time <= 0 && tTime <= 0) {\n                    // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.\n                    time && (tween._zTime = time);\n                    return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.\n                }\n            }\n        } else if (runBackwards && dur) {\n            //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)\n            if (!prevStartAt) {\n                time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0\n                p = _setDefaults({\n                    overwrite: false,\n                    data: \"isFromStart\",\n                    //we tag the tween with as \"isFromStart\" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a \"from()\" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.\n                    lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),\n                    immediateRender: immediateRender,\n                    //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)\n                    stagger: 0,\n                    parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(\".class\", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})\n                }, cleanVars);\n                harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})\n                _removeFromParent(tween._startAt = Tween.set(targets, p));\n                tween._startAt._dp = 0; // don't allow it to get put back into root timeline!\n                tween._startAt._sat = tween; // used in globalTime()\n                time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));\n                tween._zTime = time;\n                if (!immediateRender) {\n                    _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded\n                } else if (!time) {\n                    return;\n                }\n            }\n        }\n        tween._pt = tween._ptCache = 0;\n        lazy = dur && _isNotFalse(lazy) || lazy && !dur;\n        for(i = 0; i < targets.length; i++){\n            target = targets[i];\n            gsData = target._gsap || _harness(targets)[i]._gsap;\n            tween._ptLookup[i] = ptLookup = {};\n            _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)\n            index = fullTargets === targets ? i : fullTargets.indexOf(target);\n            if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {\n                tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);\n                plugin._props.forEach(function(name) {\n                    ptLookup[name] = pt;\n                });\n                plugin.priority && (hasPriority = 1);\n            }\n            if (!harness || harnessVars) {\n                for(p in cleanVars){\n                    if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {\n                        plugin.priority && (hasPriority = 1);\n                    } else {\n                        ptLookup[p] = pt = _addPropTween.call(tween, target, p, \"get\", cleanVars[p], index, fullTargets, 0, vars.stringFilter);\n                    }\n                }\n            }\n            tween._op && tween._op[i] && tween.kill(target, tween._op[i]);\n            if (autoOverwrite && tween._pt) {\n                _overwritingTween = tween;\n                _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!\n                overwritten = !tween.parent;\n                _overwritingTween = 0;\n            }\n            tween._pt && lazy && (_lazyLookup[gsData.id] = 1);\n        }\n        hasPriority && _sortPropTweensByPriority(tween);\n        tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.\n    }\n    tween._onUpdate = onUpdate;\n    tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.\n    keyframes && time <= 0 && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the \"before\" state for any staggered/delayed animations thus when the following tween initializes, it'll use the \"before\" state instead of the \"after\" state as the initial values.\n}, _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {\n    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property], pt, rootPT, lookup, i;\n    if (!ptCache) {\n        ptCache = tween._ptCache[property] = [];\n        lookup = tween._ptLookup;\n        i = tween._targets.length;\n        while(i--){\n            pt = lookup[i][property];\n            if (pt && pt.d && pt.d._pt) {\n                // it's a plugin, so find the nested PropTween\n                pt = pt.d._pt;\n                while(pt && pt.p !== property && pt.fp !== property){\n                    // \"fp\" is functionParam for things like setting CSS variables which require .setProperty(\"--var-name\", value)\n                    pt = pt._next;\n                }\n            }\n            if (!pt) {\n                // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this\n                // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo(\"x\", 200) for example.\n                _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.\n                tween.vars[property] = \"+=0\";\n                _initTween(tween, time);\n                _forceAllPropTweens = 0;\n                return 1;\n            }\n            ptCache.push(pt);\n        }\n    }\n    i = ptCache.length;\n    while(i--){\n        rootPT = ptCache[i];\n        pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.\n        pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;\n        pt.c = value - pt.s;\n        rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)\n        rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)\n    }\n}, _addAliasesToVars = function _addAliasesToVars(targets, vars) {\n    var harness = targets[0] ? _getCache(targets[0]).harness : 0, propertyAliases = harness && harness.aliases, copy, p, i, aliases;\n    if (!propertyAliases) {\n        return vars;\n    }\n    copy = _merge({}, vars);\n    for(p in propertyAliases){\n        if (p in copy) {\n            aliases = propertyAliases[p].split(\",\");\n            i = aliases.length;\n            while(i--){\n                copy[aliases[i]] = copy[p];\n            }\n        }\n    }\n    return copy;\n}, // parses multiple formats, like {\"0%\": {x: 100}, {\"50%\": {x: -20}} and { x: {\"0%\": 100, \"50%\": -20} }, and an \"ease\" can be set on any object. We populate an \"allProps\" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a \"t\" (time), \"v\", (value), and \"e\" (ease) property. This allows us to piece together a timeline later.\n_parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {\n    var ease = obj.ease || easeEach || \"power1.inOut\", p, a;\n    if (_isArray(obj)) {\n        a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease\n        obj.forEach(function(value, i) {\n            return a.push({\n                t: i / (obj.length - 1) * 100,\n                v: value,\n                e: ease\n            });\n        });\n    } else {\n        for(p in obj){\n            a = allProps[p] || (allProps[p] = []);\n            p === \"ease\" || a.push({\n                t: parseFloat(prop),\n                v: obj[p],\n                e: ease\n            });\n        }\n    }\n}, _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {\n    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf(\"random(\") ? _replaceRandom(value) : value;\n}, _staggerTweenProps = _callbackNames + \"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert\", _staggerPropsToSkip = {};\n_forEachName(_staggerTweenProps + \",id,stagger,delay,duration,paused,scrollTrigger\", function(name) {\n    return _staggerPropsToSkip[name] = 1;\n});\n/*\n * --------------------------------------------------------------------------------------\n * TWEEN\n * --------------------------------------------------------------------------------------\n */ var Tween = /*#__PURE__*/ function(_Animation2) {\n    _inheritsLoose(Tween, _Animation2);\n    function Tween(targets, vars, position, skipInherit) {\n        var _this3;\n        if (typeof vars === \"number\") {\n            position.duration = vars;\n            vars = position;\n            position = null;\n        }\n        _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;\n        var _this3$vars = _this3.vars, duration = _this3$vars.duration, delay = _this3$vars.delay, immediateRender = _this3$vars.immediateRender, stagger = _this3$vars.stagger, overwrite = _this3$vars.overwrite, keyframes = _this3$vars.keyframes, defaults = _this3$vars.defaults, scrollTrigger = _this3$vars.scrollTrigger, yoyoEase = _this3$vars.yoyoEase, parent = vars.parent || _globalTimeline, parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : \"length\" in vars) ? [\n            targets\n        ] : toArray(targets), tl, i, copy, l, p, curTarget, staggerFunc, staggerVarsToMerge;\n        _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn(\"GSAP target \" + targets + \" not found. https://greensock.com\", !_config.nullTargetWarn) || [];\n        _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property\n        _this3._overwrite = overwrite;\n        if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n            vars = _this3.vars;\n            tl = _this3.timeline = new Timeline({\n                data: \"nested\",\n                defaults: defaults || {},\n                targets: parent && parent.data === \"nested\" ? parent.vars.targets : parsedTargets\n            }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.\n            tl.kill();\n            tl.parent = tl._dp = _assertThisInitialized(_this3);\n            tl._start = 0;\n            if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n                l = parsedTargets.length;\n                staggerFunc = stagger && distribute(stagger);\n                if (_isObject(stagger)) {\n                    //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.\n                    for(p in stagger){\n                        if (~_staggerTweenProps.indexOf(p)) {\n                            staggerVarsToMerge || (staggerVarsToMerge = {});\n                            staggerVarsToMerge[p] = stagger[p];\n                        }\n                    }\n                }\n                for(i = 0; i < l; i++){\n                    copy = _copyExcluding(vars, _staggerPropsToSkip);\n                    copy.stagger = 0;\n                    yoyoEase && (copy.yoyoEase = yoyoEase);\n                    staggerVarsToMerge && _merge(copy, staggerVarsToMerge);\n                    curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.\n                    copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);\n                    copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;\n                    if (!stagger && l === 1 && copy.delay) {\n                        // if someone does delay:\"random(1, 5)\", repeat:-1, for example, the delay shouldn't be inside the repeat.\n                        _this3._delay = delay = copy.delay;\n                        _this3._start += delay;\n                        copy.delay = 0;\n                    }\n                    tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);\n                    tl._ease = _easeMap.none;\n                }\n                tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!\n            } else if (keyframes) {\n                _inheritDefaults(_setDefaults(tl.vars.defaults, {\n                    ease: \"none\"\n                }));\n                tl._ease = _parseEase(keyframes.ease || vars.ease || \"none\");\n                var time = 0, a, kf, v;\n                if (_isArray(keyframes)) {\n                    keyframes.forEach(function(frame) {\n                        return tl.to(parsedTargets, frame, \">\");\n                    });\n                    tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.\n                } else {\n                    copy = {};\n                    for(p in keyframes){\n                        p === \"ease\" || p === \"easeEach\" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);\n                    }\n                    for(p in copy){\n                        a = copy[p].sort(function(a, b) {\n                            return a.t - b.t;\n                        });\n                        time = 0;\n                        for(i = 0; i < a.length; i++){\n                            kf = a[i];\n                            v = {\n                                ease: kf.e,\n                                duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration\n                            };\n                            v[p] = kf.v;\n                            tl.to(parsedTargets, v, time);\n                            time += v.duration;\n                        }\n                    }\n                    tl.duration() < duration && tl.to({}, {\n                        duration: duration - tl.duration()\n                    }); // in case keyframes didn't go to 100%\n                }\n            }\n            duration || _this3.duration(duration = tl.duration());\n        } else {\n            _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)\n        }\n        if (overwrite === true && !_suppressOverwrites) {\n            _overwritingTween = _assertThisInitialized(_this3);\n            _globalTimeline.killTweensOf(parsedTargets);\n            _overwritingTween = 0;\n        }\n        _addToTimeline(parent, _assertThisInitialized(_this3), position);\n        vars.reversed && _this3.reverse();\n        vars.paused && _this3.paused(true);\n        if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== \"nested\") {\n            _this3._tTime = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n            _this3.render(Math.max(0, -delay) || 0); //in case delay is negative\n        }\n        scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);\n        return _this3;\n    }\n    var _proto3 = Tween.prototype;\n    _proto3.render = function render(totalTime, suppressEvents, force) {\n        var prevTime = this._time, tDur = this._tDur, dur = this._dur, isNegative = totalTime < 0, tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime, time, pt, iteration, cycleDuration, prevIteration, isYoyo, ratio, timeline, yoyoEase;\n        if (!dur) {\n            _renderZeroDurationTween(this, totalTime, suppressEvents, force);\n        } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {\n            //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)\n            time = tTime;\n            timeline = this.timeline;\n            if (this._repeat) {\n                //adjust the time for repeats and yoyos\n                cycleDuration = dur + this._rDelay;\n                if (this._repeat < -1 && isNegative) {\n                    return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n                }\n                time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)\n                if (tTime === tDur) {\n                    // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)\n                    iteration = this._repeat;\n                    time = dur;\n                } else {\n                    iteration = ~~(tTime / cycleDuration);\n                    if (iteration && iteration === tTime / cycleDuration) {\n                        time = dur;\n                        iteration--;\n                    }\n                    time > dur && (time = dur);\n                }\n                isYoyo = this._yoyo && iteration & 1;\n                if (isYoyo) {\n                    yoyoEase = this._yEase;\n                    time = dur - time;\n                }\n                prevIteration = _animationCycle(this._tTime, cycleDuration);\n                if (time === prevTime && !force && this._initted) {\n                    //could be during the repeatDelay part. No need to render and fire callbacks.\n                    this._tTime = tTime;\n                    return this;\n                }\n                if (iteration !== prevIteration) {\n                    timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality\n                    if (this.vars.repeatRefresh && !isYoyo && !this._lock) {\n                        this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.\n                        this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;\n                    }\n                }\n            }\n            if (!this._initted) {\n                if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {\n                    this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.\n                    return this;\n                }\n                if (prevTime !== this._time) {\n                    // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values.\n                    return this;\n                }\n                if (dur !== this._dur) {\n                    // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.\n                    return this.render(totalTime, suppressEvents, force);\n                }\n            }\n            this._tTime = tTime;\n            this._time = time;\n            if (!this._act && this._ts) {\n                this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.\n                this._lazy = 0;\n            }\n            this.ratio = ratio = (yoyoEase || this._ease)(time / dur);\n            if (this._from) {\n                this.ratio = ratio = 1 - ratio;\n            }\n            if (time && !prevTime && !suppressEvents && !iteration) {\n                _callback(this, \"onStart\");\n                if (this._tTime !== tTime) {\n                    // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.\n                    return this;\n                }\n            }\n            pt = this._pt;\n            while(pt){\n                pt.r(ratio, pt.d);\n                pt = pt._next;\n            }\n            timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);\n            if (this._onUpdate && !suppressEvents) {\n                isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n                _callback(this, \"onUpdate\");\n            }\n            this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n            if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {\n                isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);\n                (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.\n                if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {\n                    // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();\n                    _callback(this, tTime === tDur ? \"onComplete\" : \"onReverseComplete\", true);\n                    this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n                }\n            }\n        }\n        return this;\n    };\n    _proto3.targets = function targets() {\n        return this._targets;\n    };\n    _proto3.invalidate = function invalidate(soft) {\n        // \"soft\" gives us a way to clear out everything EXCEPT the recorded pre-\"from\" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the \"from\" values would persist and then on the next render, the from() tweens would initialize and the current value would match the \"from\" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.\n        (!soft || !this.vars.runBackwards) && (this._startAt = 0);\n        this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;\n        this._ptLookup = [];\n        this.timeline && this.timeline.invalidate(soft);\n        return _Animation2.prototype.invalidate.call(this, soft);\n    };\n    _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {\n        _tickerActive || _ticker.wake();\n        this._ts || this.play();\n        var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts), ratio;\n        this._initted || _initTween(this, time);\n        ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.\n        // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.\n        // if (_isObject(property)) { // performance optimization\n        // \tfor (p in property) {\n        // \t\tif (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {\n        // \t\t\treturn this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.\n        // \t\t}\n        // \t}\n        // } else {\n        if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {\n            return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.\n        } //}\n        _alignPlayhead(this, 0);\n        this.parent || _addLinkedListItem(this._dp, this, \"_first\", \"_last\", this._dp._sort ? \"_start\" : 0);\n        return this.render(0);\n    };\n    _proto3.kill = function kill(targets, vars) {\n        if (vars === void 0) {\n            vars = \"all\";\n        }\n        if (!targets && (!vars || vars === \"all\")) {\n            this._lazy = this._pt = 0;\n            return this.parent ? _interrupt(this) : this;\n        }\n        if (this.timeline) {\n            var tDur = this.timeline.totalDuration();\n            this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.\n            this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.\n            return this;\n        }\n        var parsedTargets = this._targets, killingTargets = targets ? toArray(targets) : parsedTargets, propTweenLookup = this._ptLookup, firstPT = this._pt, overwrittenProps, curLookup, curOverwriteProps, props, p, pt, i;\n        if ((!vars || vars === \"all\") && _arraysMatch(parsedTargets, killingTargets)) {\n            vars === \"all\" && (this._pt = 0);\n            return _interrupt(this);\n        }\n        overwrittenProps = this._op = this._op || [];\n        if (vars !== \"all\") {\n            //so people can pass in a comma-delimited list of property names\n            if (_isString(vars)) {\n                p = {};\n                _forEachName(vars, function(name) {\n                    return p[name] = 1;\n                });\n                vars = p;\n            }\n            vars = _addAliasesToVars(parsedTargets, vars);\n        }\n        i = parsedTargets.length;\n        while(i--){\n            if (~killingTargets.indexOf(parsedTargets[i])) {\n                curLookup = propTweenLookup[i];\n                if (vars === \"all\") {\n                    overwrittenProps[i] = vars;\n                    props = curLookup;\n                    curOverwriteProps = {};\n                } else {\n                    curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};\n                    props = vars;\n                }\n                for(p in props){\n                    pt = curLookup && curLookup[p];\n                    if (pt) {\n                        if (!(\"kill\" in pt.d) || pt.d.kill(p) === true) {\n                            _removeLinkedListItem(this, pt, \"_pt\");\n                        }\n                        delete curLookup[p];\n                    }\n                    if (curOverwriteProps !== \"all\") {\n                        curOverwriteProps[p] = 1;\n                    }\n                }\n            }\n        }\n        this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.\n        return this;\n    };\n    Tween.to = function to(targets, vars) {\n        return new Tween(targets, vars, arguments[2]);\n    };\n    Tween.from = function from(targets, vars) {\n        return _createTweenType(1, arguments);\n    };\n    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {\n        return new Tween(callback, 0, {\n            immediateRender: false,\n            lazy: false,\n            overwrite: false,\n            delay: delay,\n            onComplete: callback,\n            onReverseComplete: callback,\n            onCompleteParams: params,\n            onReverseCompleteParams: params,\n            callbackScope: scope\n        }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)\n    };\n    Tween.fromTo = function fromTo(targets, fromVars, toVars) {\n        return _createTweenType(2, arguments);\n    };\n    Tween.set = function set(targets, vars) {\n        vars.duration = 0;\n        vars.repeatDelay || (vars.repeat = 0);\n        return new Tween(targets, vars);\n    };\n    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n        return _globalTimeline.killTweensOf(targets, props, onlyActive);\n    };\n    return Tween;\n}(Animation);\n_setDefaults(Tween.prototype, {\n    _targets: [],\n    _lazy: 0,\n    _startAt: 0,\n    _op: 0,\n    _onInit: 0\n}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)\n// _forEachName(\"to,from,fromTo,set,call,add,addLabel,addPause\", name => {\n// \tTween.prototype[name] = function() {\n// \t\tlet tl = new Timeline();\n// \t\treturn _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));\n// \t}\n// });\n//for backward compatibility. Leverage the timeline calls.\n_forEachName(\"staggerTo,staggerFrom,staggerFromTo\", function(name) {\n    Tween[name] = function() {\n        var tl = new Timeline(), params = _slice.call(arguments, 0);\n        params.splice(name === \"staggerFromTo\" ? 5 : 4, 0, 0);\n        return tl[name].apply(tl, params);\n    };\n});\n/*\n * --------------------------------------------------------------------------------------\n * PROPTWEEN\n * --------------------------------------------------------------------------------------\n */ var _setterPlain = function _setterPlain(target, property, value) {\n    return target[property] = value;\n}, _setterFunc = function _setterFunc(target, property, value) {\n    return target[property](value);\n}, _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {\n    return target[property](data.fp, value);\n}, _setterAttribute = function _setterAttribute(target, property, value) {\n    return target.setAttribute(property, value);\n}, _getSetter = function _getSetter(target, property) {\n    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;\n}, _renderPlain = function _renderPlain(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);\n}, _renderBoolean = function _renderBoolean(ratio, data) {\n    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);\n}, _renderComplexString = function _renderComplexString(ratio, data) {\n    var pt = data._pt, s = \"\";\n    if (!ratio && data.b) {\n        //b = beginning string\n        s = data.b;\n    } else if (ratio === 1 && data.e) {\n        //e = ending string\n        s = data.e;\n    } else {\n        while(pt){\n            s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the \"p\" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.\n            pt = pt._next;\n        }\n        s += data.c; //we use the \"c\" of the PropTween to store the final chunk of non-numeric text.\n    }\n    data.set(data.t, data.p, s, data);\n}, _renderPropTweens = function _renderPropTweens(ratio, data) {\n    var pt = data._pt;\n    while(pt){\n        pt.r(ratio, pt.d);\n        pt = pt._next;\n    }\n}, _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {\n    var pt = this._pt, next;\n    while(pt){\n        next = pt._next;\n        pt.p === property && pt.modifier(modifier, tween, target);\n        pt = next;\n    }\n}, _killPropTweensOf = function _killPropTweensOf(property) {\n    var pt = this._pt, hasNonDependentRemaining, next;\n    while(pt){\n        next = pt._next;\n        if (pt.p === property && !pt.op || pt.op === property) {\n            _removeLinkedListItem(this, pt, \"_pt\");\n        } else if (!pt.dep) {\n            hasNonDependentRemaining = 1;\n        }\n        pt = next;\n    }\n    return !hasNonDependentRemaining;\n}, _setterWithModifier = function _setterWithModifier(target, property, value, data) {\n    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);\n}, _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {\n    var pt = parent._pt, next, pt2, first, last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)\n    while(pt){\n        next = pt._next;\n        pt2 = first;\n        while(pt2 && pt2.pr > pt.pr){\n            pt2 = pt2._next;\n        }\n        if (pt._prev = pt2 ? pt2._prev : last) {\n            pt._prev._next = pt;\n        } else {\n            first = pt;\n        }\n        if (pt._next = pt2) {\n            pt2._prev = pt;\n        } else {\n            last = pt;\n        }\n        pt = next;\n    }\n    parent._pt = first;\n}; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)\nvar PropTween = /*#__PURE__*/ function() {\n    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {\n        this.t = target;\n        this.s = start;\n        this.c = change;\n        this.p = prop;\n        this.r = renderer || _renderPlain;\n        this.d = data || this;\n        this.set = setter || _setterPlain;\n        this.pr = priority || 0;\n        this._next = next;\n        if (next) {\n            next._prev = this;\n        }\n    }\n    var _proto4 = PropTween.prototype;\n    _proto4.modifier = function modifier(func, tween, target) {\n        this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)\n        this.set = _setterWithModifier;\n        this.m = func;\n        this.mt = target; //modifier target\n        this.tween = tween;\n    };\n    return PropTween;\n}(); //Initialization tasks\n_forEachName(_callbackNames + \"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger\", function(name) {\n    return _reservedProps[name] = 1;\n});\n_globals.TweenMax = _globals.TweenLite = Tween;\n_globals.TimelineLite = _globals.TimelineMax = Timeline;\n_globalTimeline = new Timeline({\n    sortChildren: false,\n    defaults: _defaults,\n    autoRemoveChildren: true,\n    id: \"root\",\n    smoothChildTiming: true\n});\n_config.stringFilter = _colorStringFilter;\nvar _media = [], _listeners = {}, _emptyArray = [], _lastMediaTime = 0, _contextID = 0, _dispatch = function _dispatch(type) {\n    return (_listeners[type] || _emptyArray).map(function(f) {\n        return f();\n    });\n}, _onMediaChange = function _onMediaChange() {\n    var time = Date.now(), matches = [];\n    if (time - _lastMediaTime > 2) {\n        _dispatch(\"matchMediaInit\");\n        _media.forEach(function(c) {\n            var queries = c.queries, conditions = c.conditions, match, p, anyMatch, toggled;\n            for(p in queries){\n                match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the \"matches\" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.\n                match && (anyMatch = 1);\n                if (match !== conditions[p]) {\n                    conditions[p] = match;\n                    toggled = 1;\n                }\n            }\n            if (toggled) {\n                c.revert();\n                anyMatch && matches.push(c);\n            }\n        });\n        _dispatch(\"matchMediaRevert\");\n        matches.forEach(function(c) {\n            return c.onMatch(c);\n        });\n        _lastMediaTime = time;\n        _dispatch(\"matchMedia\");\n    }\n};\nvar Context = /*#__PURE__*/ function() {\n    function Context(func, scope) {\n        this.selector = scope && selector(scope);\n        this.data = [];\n        this._r = []; // returned/cleanup functions\n        this.isReverted = false;\n        this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because \"this\" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely\n        func && this.add(func);\n    }\n    var _proto5 = Context.prototype;\n    _proto5.add = function add(name, func, scope) {\n        // possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.\n        // if (name && _isFunction(name.revert)) {\n        // \tthis.data.push(name);\n        // \treturn (name._ctx = this);\n        // }\n        if (_isFunction(name)) {\n            scope = func;\n            func = name;\n            name = _isFunction;\n        }\n        var self = this, f = function f() {\n            var prev = _context, prevSelector = self.selector, result;\n            prev && prev !== self && prev.data.push(self);\n            scope && (self.selector = selector(scope));\n            _context = self;\n            result = func.apply(self, arguments);\n            _isFunction(result) && self._r.push(result);\n            _context = prev;\n            self.selector = prevSelector;\n            self.isReverted = false;\n            return result;\n        };\n        self.last = f;\n        return name === _isFunction ? f(self) : name ? self[name] = f : f;\n    };\n    _proto5.ignore = function ignore(func) {\n        var prev = _context;\n        _context = null;\n        func(this);\n        _context = prev;\n    };\n    _proto5.getTweens = function getTweens() {\n        var a = [];\n        this.data.forEach(function(e) {\n            return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === \"nested\") && a.push(e);\n        });\n        return a;\n    };\n    _proto5.clear = function clear() {\n        this._r.length = this.data.length = 0;\n    };\n    _proto5.kill = function kill(revert, matchMedia) {\n        var _this4 = this;\n        if (revert) {\n            var tweens = this.getTweens();\n            this.data.forEach(function(t) {\n                // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.\n                if (t.data === \"isFlip\") {\n                    t.revert();\n                    t.getChildren(true, true, false).forEach(function(tween) {\n                        return tweens.splice(tweens.indexOf(tween), 1);\n                    });\n                }\n            }); // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort\n            tweens.map(function(t) {\n                return {\n                    g: t.globalTime(0),\n                    t: t\n                };\n            }).sort(function(a, b) {\n                return b.g - a.g || -Infinity;\n            }).forEach(function(o) {\n                return o.t.revert(revert);\n            }); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the \" || -1\" in the sort keeps the order properly.\n            this.data.forEach(function(e) {\n                return !(e instanceof Tween) && e.revert && e.revert(revert);\n            });\n            this._r.forEach(function(f) {\n                return f(revert, _this4);\n            });\n            this.isReverted = true;\n        } else {\n            this.data.forEach(function(e) {\n                return e.kill && e.kill();\n            });\n        }\n        this.clear();\n        if (matchMedia) {\n            var i = _media.length;\n            while(i--){\n                // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.\n                _media[i].id === this.id && _media.splice(i, 1);\n            }\n        }\n    };\n    _proto5.revert = function revert(config) {\n        this.kill(config || {});\n    };\n    return Context;\n}();\nvar MatchMedia = /*#__PURE__*/ function() {\n    function MatchMedia(scope) {\n        this.contexts = [];\n        this.scope = scope;\n    }\n    var _proto6 = MatchMedia.prototype;\n    _proto6.add = function add(conditions, func, scope) {\n        _isObject(conditions) || (conditions = {\n            matches: conditions\n        });\n        var context = new Context(0, scope || this.scope), cond = context.conditions = {}, mq, p, active;\n        _context && !context.selector && (context.selector = _context.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()\n        this.contexts.push(context);\n        func = context.add(\"onMatch\", func);\n        context.queries = conditions;\n        for(p in conditions){\n            if (p === \"all\") {\n                active = 1;\n            } else {\n                mq = _win.matchMedia(conditions[p]);\n                if (mq) {\n                    _media.indexOf(context) < 0 && _media.push(context);\n                    (cond[p] = mq.matches) && (active = 1);\n                    mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener(\"change\", _onMediaChange);\n                }\n            }\n        }\n        active && func(context);\n        return this;\n    } // refresh() {\n    ;\n    _proto6.revert = function revert(config) {\n        this.kill(config || {});\n    };\n    _proto6.kill = function kill(revert) {\n        this.contexts.forEach(function(c) {\n            return c.kill(revert, true);\n        });\n    };\n    return MatchMedia;\n}();\n/*\n * --------------------------------------------------------------------------------------\n * GSAP\n * --------------------------------------------------------------------------------------\n */ var _gsap = {\n    registerPlugin: function registerPlugin() {\n        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n            args[_key2] = arguments[_key2];\n        }\n        args.forEach(function(config) {\n            return _createPlugin(config);\n        });\n    },\n    timeline: function timeline(vars) {\n        return new Timeline(vars);\n    },\n    getTweensOf: function getTweensOf(targets, onlyActive) {\n        return _globalTimeline.getTweensOf(targets, onlyActive);\n    },\n    getProperty: function getProperty(target, property, unit, uncache) {\n        _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in\n        var getter = _getCache(target || {}).get, format = unit ? _passThrough : _numericIfPossible;\n        unit === \"native\" && (unit = \"\");\n        return !target ? target : !property ? function(property, unit, uncache) {\n            return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n        } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n    },\n    quickSetter: function quickSetter(target, property, unit) {\n        target = toArray(target);\n        if (target.length > 1) {\n            var setters = target.map(function(t) {\n                return gsap.quickSetter(t, property, unit);\n            }), l = setters.length;\n            return function(value) {\n                var i = l;\n                while(i--){\n                    setters[i](value);\n                }\n            };\n        }\n        target = target[0] || {};\n        var Plugin = _plugins[property], cache = _getCache(target), p = cache.harness && (cache.harness.aliases || {})[property] || property, // in case it's an alias, like \"rotate\" for \"rotation\".\n        setter = Plugin ? function(value) {\n            var p = new Plugin();\n            _quickTween._pt = 0;\n            p.init(target, unit ? value + unit : value, _quickTween, 0, [\n                target\n            ]);\n            p.render(1, p);\n            _quickTween._pt && _renderPropTweens(1, _quickTween);\n        } : cache.set(target, p);\n        return Plugin ? setter : function(value) {\n            return setter(target, p, unit ? value + unit : value, cache, 1);\n        };\n    },\n    quickTo: function quickTo(target, property, vars) {\n        var _merge2;\n        var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = \"+=0.1\", _merge2.paused = true, _merge2), vars || {})), func = function func(value, start, startIsRelative) {\n            return tween.resetTo(property, value, start, startIsRelative);\n        };\n        func.tween = tween;\n        return func;\n    },\n    isTweening: function isTweening(targets) {\n        return _globalTimeline.getTweensOf(targets, true).length > 0;\n    },\n    defaults: function defaults(value) {\n        value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));\n        return _mergeDeep(_defaults, value || {});\n    },\n    config: function config(value) {\n        return _mergeDeep(_config, value || {});\n    },\n    registerEffect: function registerEffect(_ref3) {\n        var name = _ref3.name, effect = _ref3.effect, plugins = _ref3.plugins, defaults = _ref3.defaults, extendTimeline = _ref3.extendTimeline;\n        (plugins || \"\").split(\",\").forEach(function(pluginName) {\n            return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + \" effect requires \" + pluginName + \" plugin.\");\n        });\n        _effects[name] = function(targets, vars, tl) {\n            return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);\n        };\n        if (extendTimeline) {\n            Timeline.prototype[name] = function(targets, vars, position) {\n                return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);\n            };\n        }\n    },\n    registerEase: function registerEase(name, ease) {\n        _easeMap[name] = _parseEase(ease);\n    },\n    parseEase: function parseEase(ease, defaultEase) {\n        return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;\n    },\n    getById: function getById(id) {\n        return _globalTimeline.getById(id);\n    },\n    exportRoot: function exportRoot(vars, includeDelayedCalls) {\n        if (vars === void 0) {\n            vars = {};\n        }\n        var tl = new Timeline(vars), child, next;\n        tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);\n        _globalTimeline.remove(tl);\n        tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).\n        tl._time = tl._tTime = _globalTimeline._time;\n        child = _globalTimeline._first;\n        while(child){\n            next = child._next;\n            if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {\n                _addToTimeline(tl, child, child._start - child._delay);\n            }\n            child = next;\n        }\n        _addToTimeline(_globalTimeline, tl, 0);\n        return tl;\n    },\n    context: function context(func, scope) {\n        return func ? new Context(func, scope) : _context;\n    },\n    matchMedia: function matchMedia(scope) {\n        return new MatchMedia(scope);\n    },\n    matchMediaRefresh: function matchMediaRefresh() {\n        return _media.forEach(function(c) {\n            var cond = c.conditions, found, p;\n            for(p in cond){\n                if (cond[p]) {\n                    cond[p] = false;\n                    found = 1;\n                }\n            }\n            found && c.revert();\n        }) || _onMediaChange();\n    },\n    addEventListener: function addEventListener(type, callback) {\n        var a = _listeners[type] || (_listeners[type] = []);\n        ~a.indexOf(callback) || a.push(callback);\n    },\n    removeEventListener: function removeEventListener(type, callback) {\n        var a = _listeners[type], i = a && a.indexOf(callback);\n        i >= 0 && a.splice(i, 1);\n    },\n    utils: {\n        wrap: wrap,\n        wrapYoyo: wrapYoyo,\n        distribute: distribute,\n        random: random,\n        snap: snap,\n        normalize: normalize,\n        getUnit: getUnit,\n        clamp: clamp,\n        splitColor: splitColor,\n        toArray: toArray,\n        selector: selector,\n        mapRange: mapRange,\n        pipe: pipe,\n        unitize: unitize,\n        interpolate: interpolate,\n        shuffle: shuffle\n    },\n    install: _install,\n    effects: _effects,\n    ticker: _ticker,\n    updateRoot: Timeline.updateRoot,\n    plugins: _plugins,\n    globalTimeline: _globalTimeline,\n    core: {\n        PropTween: PropTween,\n        globals: _addGlobal,\n        Tween: Tween,\n        Timeline: Timeline,\n        Animation: Animation,\n        getCache: _getCache,\n        _removeLinkedListItem: _removeLinkedListItem,\n        reverting: function reverting() {\n            return _reverting;\n        },\n        context: function context(toAdd) {\n            if (toAdd && _context) {\n                _context.data.push(toAdd);\n                toAdd._ctx = _context;\n            }\n            return _context;\n        },\n        suppressOverwrites: function suppressOverwrites(value) {\n            return _suppressOverwrites = value;\n        }\n    }\n};\n_forEachName(\"to,from,fromTo,delayedCall,set,killTweensOf\", function(name) {\n    return _gsap[name] = Tween[name];\n});\n_ticker.add(Timeline.updateRoot);\n_quickTween = _gsap.to({}, {\n    duration: 0\n}); // ---- EXTRA PLUGINS --------------------------------------------------------\nvar _getPluginPropTween = function _getPluginPropTween(plugin, prop) {\n    var pt = plugin._pt;\n    while(pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop){\n        pt = pt._next;\n    }\n    return pt;\n}, _addModifiers = function _addModifiers(tween, modifiers) {\n    var targets = tween._targets, p, i, pt;\n    for(p in modifiers){\n        i = targets.length;\n        while(i--){\n            pt = tween._ptLookup[i][p];\n            if (pt && (pt = pt.d)) {\n                if (pt._pt) {\n                    // is a plugin\n                    pt = _getPluginPropTween(pt, p);\n                }\n                pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);\n            }\n        }\n    }\n}, _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {\n    return {\n        name: name,\n        rawVars: 1,\n        //don't pre-process function-based values or \"random()\" strings.\n        init: function init(target, vars, tween) {\n            tween._onInit = function(tween) {\n                var temp, p;\n                if (_isString(vars)) {\n                    temp = {};\n                    _forEachName(vars, function(name) {\n                        return temp[name] = 1;\n                    }); //if the user passes in a comma-delimited list of property names to roundProps, like \"x,y\", we round to whole numbers.\n                    vars = temp;\n                }\n                if (modifier) {\n                    temp = {};\n                    for(p in vars){\n                        temp[p] = modifier(vars[p]);\n                    }\n                    vars = temp;\n                }\n                _addModifiers(tween, vars);\n            };\n        }\n    };\n}; //register core plugins\nvar gsap = _gsap.registerPlugin({\n    name: \"attr\",\n    init: function init(target, vars, tween, index, targets) {\n        var p, pt, v;\n        this.tween = tween;\n        for(p in vars){\n            v = target.getAttribute(p) || \"\";\n            pt = this.add(target, \"setAttribute\", (v || 0) + \"\", vars[p], index, targets, 0, 0, p);\n            pt.op = p;\n            pt.b = v; // record the beginning value so we can revert()\n            this._props.push(p);\n        }\n    },\n    render: function render(ratio, data) {\n        var pt = data._pt;\n        while(pt){\n            _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)\n            pt = pt._next;\n        }\n    }\n}, {\n    name: \"endArray\",\n    init: function init(target, value) {\n        var i = value.length;\n        while(i--){\n            this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);\n        }\n    }\n}, _buildModifierPlugin(\"roundProps\", _roundModifier), _buildModifierPlugin(\"modifiers\"), _buildModifierPlugin(\"snap\", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.\nTween.version = Timeline.version = gsap.version = \"3.12.2\";\n_coreReady = 1;\n_windowExists() && _wake();\nvar Power0 = _easeMap.Power0, Power1 = _easeMap.Power1, Power2 = _easeMap.Power2, Power3 = _easeMap.Power3, Power4 = _easeMap.Power4, Linear = _easeMap.Linear, Quad = _easeMap.Quad, Cubic = _easeMap.Cubic, Quart = _easeMap.Quart, Quint = _easeMap.Quint, Strong = _easeMap.Strong, Elastic = _easeMap.Elastic, Back = _easeMap.Back, SteppedEase = _easeMap.SteppedEase, Bounce = _easeMap.Bounce, Sine = _easeMap.Sine, Expo = _easeMap.Expo, Circ = _easeMap.Circ;\n\n //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/gsap-core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gsap/index.js":
/*!************************************!*\
  !*** ./node_modules/gsap/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Back: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Back),\n/* harmony export */   Bounce: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Bounce),\n/* harmony export */   CSSPlugin: () => (/* reexport safe */ _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin),\n/* harmony export */   Circ: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Circ),\n/* harmony export */   Cubic: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Cubic),\n/* harmony export */   Elastic: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Elastic),\n/* harmony export */   Expo: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Expo),\n/* harmony export */   Linear: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Linear),\n/* harmony export */   Power0: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power0),\n/* harmony export */   Power1: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power1),\n/* harmony export */   Power2: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power2),\n/* harmony export */   Power3: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power3),\n/* harmony export */   Power4: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power4),\n/* harmony export */   Quad: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quad),\n/* harmony export */   Quart: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quart),\n/* harmony export */   Quint: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quint),\n/* harmony export */   Sine: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Sine),\n/* harmony export */   SteppedEase: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.SteppedEase),\n/* harmony export */   Strong: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Strong),\n/* harmony export */   TimelineLite: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineLite),\n/* harmony export */   TimelineMax: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineMax),\n/* harmony export */   TweenLite: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TweenLite),\n/* harmony export */   TweenMax: () => (/* binding */ TweenMaxWithCSS),\n/* harmony export */   \"default\": () => (/* binding */ gsapWithCSS),\n/* harmony export */   gsap: () => (/* binding */ gsapWithCSS)\n/* harmony export */ });\n/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ \"(ssr)/./node_modules/gsap/gsap-core.js\");\n/* harmony import */ var _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSSPlugin.js */ \"(ssr)/./node_modules/gsap/CSSPlugin.js\");\n\n\nvar gsapWithCSS = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(_CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin) || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap, // to protect from tree shaking\nTweenMaxWithCSS = gsapWithCSS.core.Tween;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3NhcC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcU47QUFDMUs7QUFDM0MsSUFBSXVCLGNBQWN2QiwrQ0FBSUEsQ0FBQ3dCLGNBQWMsQ0FBQ0Ysb0RBQVNBLEtBQUt0QiwrQ0FBSUEsRUFDcEQsK0JBQStCO0FBQ25DeUIsa0JBQWtCRixZQUFZRyxJQUFJLENBQUNDLEtBQUs7QUFDc08iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYWlucGFnZWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2dzYXAvaW5kZXguanM/MThlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnc2FwLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMsIFR3ZWVuTGl0ZSwgVGltZWxpbmVMaXRlLCBUaW1lbGluZU1heCB9IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuaW1wb3J0IHsgQ1NTUGx1Z2luIH0gZnJvbSBcIi4vQ1NTUGx1Z2luLmpzXCI7XG52YXIgZ3NhcFdpdGhDU1MgPSBnc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbikgfHwgZ3NhcCxcbiAgICAvLyB0byBwcm90ZWN0IGZyb20gdHJlZSBzaGFraW5nXG5Ud2Vlbk1heFdpdGhDU1MgPSBnc2FwV2l0aENTUy5jb3JlLlR3ZWVuO1xuZXhwb3J0IHsgZ3NhcFdpdGhDU1MgYXMgZ3NhcCwgZ3NhcFdpdGhDU1MgYXMgZGVmYXVsdCwgQ1NTUGx1Z2luLCBUd2Vlbk1heFdpdGhDU1MgYXMgVHdlZW5NYXgsIFR3ZWVuTGl0ZSwgVGltZWxpbmVNYXgsIFRpbWVsaW5lTGl0ZSwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjIH07Il0sIm5hbWVzIjpbImdzYXAiLCJQb3dlcjAiLCJQb3dlcjEiLCJQb3dlcjIiLCJQb3dlcjMiLCJQb3dlcjQiLCJMaW5lYXIiLCJRdWFkIiwiQ3ViaWMiLCJRdWFydCIsIlF1aW50IiwiU3Ryb25nIiwiRWxhc3RpYyIsIkJhY2siLCJTdGVwcGVkRWFzZSIsIkJvdW5jZSIsIlNpbmUiLCJFeHBvIiwiQ2lyYyIsIlR3ZWVuTGl0ZSIsIlRpbWVsaW5lTGl0ZSIsIlRpbWVsaW5lTWF4IiwiQ1NTUGx1Z2luIiwiZ3NhcFdpdGhDU1MiLCJyZWdpc3RlclBsdWdpbiIsIlR3ZWVuTWF4V2l0aENTUyIsImNvcmUiLCJUd2VlbiIsImRlZmF1bHQiLCJUd2Vlbk1heCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/index.js\n");

/***/ })

};
;